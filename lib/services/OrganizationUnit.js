var util = require("util");
var ServiceClass = require("./../ServiceClass");

function OrganizationUnit(skautIS) {
  ServiceClass.call(this, skautIS);
  this.serviceName = "OrganizationUnit";
  this.serviceLocation = "http://test-is.skaut.cz/JunakWebservice/OrganizationUnit.asmx";
}

util.inherits(OrganizationUnit, ServiceClass);

OrganizationUnit.prototype.RegistrationCategoryDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrationCategoryDelete", "RegistrationCategoryDelete", "registrationCategoryDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.RegistrationCategoryInsert = function(ID_Login, ID_UnitRegistration, ID_RegistrationCategoryParent, Amount, IsAfterDeadline, IsJournal, DisplayName, ID_MembershipType, Note, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrationCategoryInsert", "RegistrationCategoryInsert", "registrationCategoryInsertInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistration", type: "int", value: ID_UnitRegistration, nullable: false}, {name: "ID_RegistrationCategoryParent", type: "int", value: ID_RegistrationCategoryParent, nullable: true}, {name: "Amount", type: "float", value: Amount, nullable: true}, {name: "IsAfterDeadline", type: "bool", value: IsAfterDeadline, nullable: true}, {name: "IsJournal", type: "bool", value: IsJournal, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.SexAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/SexAll", "SexAll", "sexAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.StatementAll = function(ID_Login, ID_Unit, ID_StatementType, callback) {
  this.soapRequest("https://is.skaut.cz/StatementAll", "StatementAll", "statementAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_StatementType", type: "string", value: ID_StatementType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.StatementDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/StatementDelete", "StatementDelete", "statementDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.StatementDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/StatementDetail", "StatementDetail", "statementDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"Year","paramType":"s:int"},{"paramName":"ID_StatementType","paramType":"s:string"},{"paramName":"StatementType","paramType":"s:string"},{"paramName":"IsError","paramType":"s:boolean"},{"paramName":"IsDelivered","paramType":"s:boolean"},{"paramName":"DateDelivered","paramType":"s:dateTime"},{"paramName":"IsThousands","paramType":"s:boolean"},{"paramName":"IsConsultant","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.StatementEntryAll = function(ID_Login, ID_Statement, ID_StatementEntryType, callback) {
  this.soapRequest("https://is.skaut.cz/StatementEntryAll", "StatementEntryAll", "statementEntryAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Statement", type: "int", value: ID_Statement, nullable: false}, {name: "ID_StatementEntryType", type: "int", value: ID_StatementEntryType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.StatementEntryTypeAll = function(ID_Login, DisplayName, ID_StatementType, callback) {
  this.soapRequest("https://is.skaut.cz/StatementEntryTypeAll", "StatementEntryTypeAll", "statementEntryTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_StatementType", type: "string", value: ID_StatementType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.StatementEntryUpdate = function(ID_Login, ID, ID_Statement, ID_StatementEntryType, Amount, callback) {
  this.soapRequest("https://is.skaut.cz/StatementEntryUpdate", "StatementEntryUpdate", "statementEntry", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Statement", type: "int", value: ID_Statement, nullable: false}, {name: "ID_StatementEntryType", type: "int", value: ID_StatementEntryType, nullable: true}, {name: "Amount", type: "float", value: Amount, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.StatementInsert = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Year, ID_StatementType, StatementType, IsError, IsDelivered, DateDelivered, IsThousands, IsConsultant, callback) {
  this.soapRequest("https://is.skaut.cz/StatementInsert", "StatementInsert", "statement", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "ID_StatementType", type: "string", value: ID_StatementType, nullable: true}, {name: "StatementType", type: "string", value: StatementType, nullable: true}, {name: "IsError", type: "bool", value: IsError, nullable: true}, {name: "IsDelivered", type: "bool", value: IsDelivered, nullable: true}, {name: "DateDelivered", type: "string", value: DateDelivered, nullable: true}, {name: "IsThousands", type: "bool", value: IsThousands, nullable: true}, {name: "IsConsultant", type: "bool", value: IsConsultant, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.StatementTypeAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/StatementTypeAll", "StatementTypeAll", "statementTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.StatementUpdate = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Year, ID_StatementType, StatementType, IsError, IsDelivered, DateDelivered, IsThousands, IsConsultant, callback) {
  this.soapRequest("https://is.skaut.cz/StatementUpdate", "StatementUpdate", "statement", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "ID_StatementType", type: "string", value: ID_StatementType, nullable: true}, {name: "StatementType", type: "string", value: StatementType, nullable: true}, {name: "IsError", type: "bool", value: IsError, nullable: true}, {name: "IsDelivered", type: "bool", value: IsDelivered, nullable: true}, {name: "DateDelivered", type: "string", value: DateDelivered, nullable: true}, {name: "IsThousands", type: "bool", value: IsThousands, nullable: true}, {name: "IsConsultant", type: "bool", value: IsConsultant, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.TroopArtAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/TroopArtAll", "TroopArtAll", "troopArtAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitAll = function(ID_Login, ID_Application, ID, ID_Group, ID_UnitType, RegistrationNumber, DisplayName, Location, AccountNumber, IC, ID_UnitParent, ID_UnitChild, ID_UnitTree, RegistrationNumberStartWith, callback) {
  this.soapRequest("https://is.skaut.cz/UnitAll", "UnitAll", "unitAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Group", type: "int", value: ID_Group, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "AccountNumber", type: "string", value: AccountNumber, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: true}, {name: "ID_UnitChild", type: "int", value: ID_UnitChild, nullable: true}, {name: "ID_UnitTree", type: "int", value: ID_UnitTree, nullable: true}, {name: "RegistrationNumberStartWith", type: "bool", value: RegistrationNumberStartWith, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitContactAll = function(ID_Login, ID_Application, ID_Unit, ID_ContactType, Publish, callback) {
  this.soapRequest("https://is.skaut.cz/UnitContactAll", "UnitContactAll", "unitContactAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_ContactType", type: "string", value: ID_ContactType, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitContactDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitContactDelete", "UnitContactDelete", "unitContactDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.UnitContactInsert = function(ID_Login, ID_Unit, ID, Publish, ID_ContactType, Value, IsSts, Note, callback) {
  this.soapRequest("https://is.skaut.cz/UnitContactInsert", "UnitContactInsert", "unitContact", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "ID_ContactType", type: "string", value: ID_ContactType, nullable: true}, {name: "Value", type: "string", value: Value, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitContactUpdate = function(ID_Login, ID_Unit, ID, Publish, ID_ContactType, Value, IsSts, Note, callback) {
  this.soapRequest("https://is.skaut.cz/UnitContactUpdate", "UnitContactUpdate", "unitContact", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "ID_ContactType", type: "string", value: ID_ContactType, nullable: true}, {name: "Value", type: "string", value: Value, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitInsertUnit = function(ID_Login, ID, OnlyValidate, IsPropertyOwner, ID_JournalNovice, FullDisplayName, ID_Group, ID_Unit, ID_UnitType, UnitType, ContainsMembers, CommissionDeadline, DisplayName, SortName, RegistrationNumber, ShortRegistrationNumber, Location, IC, IsVatPayer, DIC, FileReference, Street, City, Postcode, State, PostalFirstLine, PostalStreet, PostalCity, PostalPostcode, PostalState, Note, ID_TroopArt, TroopArt, CanUpdateRegistrationNumber, LogoContent, LogoExtension, IsUnitCancel, JournalParent, ChangeFreeJournal, ID_UnitParent, IsPostalAuthenticated, IsAddressAuthenticated, AddressDistrict, PostalDistrict, NewDisplayName, CompleteDisplayName, ID_PersonChangeName, PersonChangeName, DateChangeName, PropertyAgreementExtension, ID_TempFilePropertyAgreement, PropertyAgreementContent, callback) {
  this.soapRequest("https://is.skaut.cz/UnitInsertUnit", "UnitInsertUnit", "unit", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "ID_JournalNovice", type: "string", value: ID_JournalNovice, nullable: true}, {name: "FullDisplayName", type: "string", value: FullDisplayName, nullable: true}, {name: "ID_Group", type: "int", value: ID_Group, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "UnitType", type: "string", value: UnitType, nullable: true}, {name: "ContainsMembers", type: "bool", value: ContainsMembers, nullable: true}, {name: "CommissionDeadline", type: "int", value: CommissionDeadline, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "SortName", type: "string", value: SortName, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ShortRegistrationNumber", type: "string", value: ShortRegistrationNumber, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "IsVatPayer", type: "bool", value: IsVatPayer, nullable: true}, {name: "DIC", type: "string", value: DIC, nullable: true}, {name: "FileReference", type: "string", value: FileReference, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "PostalFirstLine", type: "string", value: PostalFirstLine, nullable: true}, {name: "PostalStreet", type: "string", value: PostalStreet, nullable: true}, {name: "PostalCity", type: "string", value: PostalCity, nullable: true}, {name: "PostalPostcode", type: "string", value: PostalPostcode, nullable: true}, {name: "PostalState", type: "string", value: PostalState, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_TroopArt", type: "int", value: ID_TroopArt, nullable: true}, {name: "TroopArt", type: "string", value: TroopArt, nullable: true}, {name: "CanUpdateRegistrationNumber", type: "bool", value: CanUpdateRegistrationNumber, nullable: true}, {name: "LogoContent", type: "string", value: LogoContent, nullable: true}, {name: "LogoExtension", type: "string", value: LogoExtension, nullable: true}, {name: "IsUnitCancel", type: "bool", value: IsUnitCancel, nullable: true}, {name: "JournalParent", type: "bool", value: JournalParent, nullable: true}, {name: "ChangeFreeJournal", type: "bool", value: ChangeFreeJournal, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: true}, {name: "IsPostalAuthenticated", type: "bool", value: IsPostalAuthenticated, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "AddressDistrict", type: "string", value: AddressDistrict, nullable: true}, {name: "PostalDistrict", type: "string", value: PostalDistrict, nullable: true}, {name: "NewDisplayName", type: "string", value: NewDisplayName, nullable: true}, {name: "CompleteDisplayName", type: "string", value: CompleteDisplayName, nullable: true}, {name: "ID_PersonChangeName", type: "int", value: ID_PersonChangeName, nullable: true}, {name: "PersonChangeName", type: "string", value: PersonChangeName, nullable: true}, {name: "DateChangeName", type: "string", value: DateChangeName, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "ID_TempFilePropertyAgreement", type: "string", value: ID_TempFilePropertyAgreement, nullable: true}, {name: "PropertyAgreementContent", type: "string", value: PropertyAgreementContent, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitMistakeReportDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitMistakeReportDelete", "UnitMistakeReportDelete", "unitMistakeReportDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.UnitMistakeReportInsert = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, ID_Mistake, Mistake, DisplayName, ParentComment, callback) {
  this.soapRequest("https://is.skaut.cz/UnitMistakeReportInsert", "UnitMistakeReportInsert", "unitMistakeReport", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_Mistake", type: "int", value: ID_Mistake, nullable: true}, {name: "Mistake", type: "string", value: Mistake, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ParentComment", type: "string", value: ParentComment, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitRegistrationAll = function(ID_Login, ID_Unit, Year, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationAll", "UnitRegistrationAll", "unitRegistrationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "Year", type: "int", value: Year, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitRegistrationCheck = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationCheck", "UnitRegistrationCheck", "unitRegistrationCheckInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.UnitRegistrationDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationDetail", "UnitRegistrationDetail", "unitRegistrationDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"Year","paramType":"s:int"},{"paramName":"DateChecked","paramType":"s:dateTime"},{"paramName":"DateConfirmed","paramType":"s:dateTime"},{"paramName":"IsDelivered","paramType":"s:boolean"},{"paramName":"IsAccepted","paramType":"s:boolean"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_UnitType","paramType":"s:string"},{"paramName":"Instructions","paramType":"s:string"},{"paramName":"ID_UnitRegistrationParent","paramType":"s:int"},{"paramName":"UnitRegistrationParent","paramType":"s:string"},{"paramName":"InstructionsParent","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.UnitRegistrationInsert = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Year, DateChecked, DateConfirmed, IsDelivered, IsAccepted, DisplayName, ID_UnitType, Instructions, ID_UnitRegistrationParent, UnitRegistrationParent, InstructionsParent, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationInsert", "UnitRegistrationInsert", "unitRegistration", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "DateChecked", type: "string", value: DateChecked, nullable: true}, {name: "DateConfirmed", type: "string", value: DateConfirmed, nullable: true}, {name: "IsDelivered", type: "bool", value: IsDelivered, nullable: true}, {name: "IsAccepted", type: "bool", value: IsAccepted, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "Instructions", type: "string", value: Instructions, nullable: true}, {name: "ID_UnitRegistrationParent", type: "int", value: ID_UnitRegistrationParent, nullable: true}, {name: "UnitRegistrationParent", type: "string", value: UnitRegistrationParent, nullable: true}, {name: "InstructionsParent", type: "string", value: InstructionsParent, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitRegistrationUpdate = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Year, DateChecked, DateConfirmed, IsDelivered, IsAccepted, DisplayName, ID_UnitType, Instructions, ID_UnitRegistrationParent, UnitRegistrationParent, InstructionsParent, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationUpdate", "UnitRegistrationUpdate", "unitRegistration", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "DateChecked", type: "string", value: DateChecked, nullable: true}, {name: "DateConfirmed", type: "string", value: DateConfirmed, nullable: true}, {name: "IsDelivered", type: "bool", value: IsDelivered, nullable: true}, {name: "IsAccepted", type: "bool", value: IsAccepted, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "Instructions", type: "string", value: Instructions, nullable: true}, {name: "ID_UnitRegistrationParent", type: "int", value: ID_UnitRegistrationParent, nullable: true}, {name: "UnitRegistrationParent", type: "string", value: UnitRegistrationParent, nullable: true}, {name: "InstructionsParent", type: "string", value: InstructionsParent, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitTreeAll = function(ID_Login, ID_Application, ID_UnitParent, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTreeAll", "UnitTreeAll", "unitTreeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: false}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitTreeDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTreeDetail", "UnitTreeDetail", "unitTreeDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"ID_UnitTreeReason","paramType":"s:string"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"ID_UnitParent","paramType":"s:int"},{"paramName":"UnitParent","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"ID_UnitType","paramType":"s:string"},{"paramName":"ID_UnitMerge","paramType":"s:int"},{"paramName":"UnitMerge","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.UnitTreeReasonAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTreeReasonAll", "UnitTreeReasonAll", "unitTreeReasonAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitTreeUpdate = function(ID_Login, ID, ValidFrom, ValidTo, ID_UnitTreeReason, ID_Unit, Unit, ID_UnitParent, UnitParent, RegistrationNumber, ID_UnitType, ID_UnitMerge, UnitMerge, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTreeUpdate", "UnitTreeUpdate", "unitTree", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_UnitTreeReason", type: "string", value: ID_UnitTreeReason, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: true}, {name: "UnitParent", type: "string", value: UnitParent, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "ID_UnitMerge", type: "int", value: ID_UnitMerge, nullable: true}, {name: "UnitMerge", type: "string", value: UnitMerge, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitTypeAll = function(ID_Login, DisplayName, ID_UnitTypeCreate, ID_UnitTypeParent, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTypeAll", "UnitTypeAll", "unitTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_UnitTypeCreate", type: "string", value: ID_UnitTypeCreate, nullable: true}, {name: "ID_UnitTypeParent", type: "string", value: ID_UnitTypeParent, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitUpdate = function(ID_Login, ID, OnlyValidate, IsPropertyOwner, ID_JournalNovice, FullDisplayName, ID_Group, ID_Unit, ID_UnitType, UnitType, ContainsMembers, CommissionDeadline, DisplayName, SortName, RegistrationNumber, ShortRegistrationNumber, Location, IC, IsVatPayer, DIC, FileReference, Street, City, Postcode, State, PostalFirstLine, PostalStreet, PostalCity, PostalPostcode, PostalState, Note, ID_TroopArt, TroopArt, CanUpdateRegistrationNumber, LogoContent, LogoExtension, IsUnitCancel, JournalParent, ChangeFreeJournal, ID_UnitParent, IsPostalAuthenticated, IsAddressAuthenticated, AddressDistrict, PostalDistrict, NewDisplayName, CompleteDisplayName, ID_PersonChangeName, PersonChangeName, DateChangeName, PropertyAgreementExtension, ID_TempFilePropertyAgreement, PropertyAgreementContent, callback) {
  this.soapRequest("https://is.skaut.cz/UnitUpdate", "UnitUpdate", "unit", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "ID_JournalNovice", type: "string", value: ID_JournalNovice, nullable: true}, {name: "FullDisplayName", type: "string", value: FullDisplayName, nullable: true}, {name: "ID_Group", type: "int", value: ID_Group, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "UnitType", type: "string", value: UnitType, nullable: true}, {name: "ContainsMembers", type: "bool", value: ContainsMembers, nullable: true}, {name: "CommissionDeadline", type: "int", value: CommissionDeadline, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "SortName", type: "string", value: SortName, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ShortRegistrationNumber", type: "string", value: ShortRegistrationNumber, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "IsVatPayer", type: "bool", value: IsVatPayer, nullable: true}, {name: "DIC", type: "string", value: DIC, nullable: true}, {name: "FileReference", type: "string", value: FileReference, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "PostalFirstLine", type: "string", value: PostalFirstLine, nullable: true}, {name: "PostalStreet", type: "string", value: PostalStreet, nullable: true}, {name: "PostalCity", type: "string", value: PostalCity, nullable: true}, {name: "PostalPostcode", type: "string", value: PostalPostcode, nullable: true}, {name: "PostalState", type: "string", value: PostalState, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_TroopArt", type: "int", value: ID_TroopArt, nullable: true}, {name: "TroopArt", type: "string", value: TroopArt, nullable: true}, {name: "CanUpdateRegistrationNumber", type: "bool", value: CanUpdateRegistrationNumber, nullable: true}, {name: "LogoContent", type: "string", value: LogoContent, nullable: true}, {name: "LogoExtension", type: "string", value: LogoExtension, nullable: true}, {name: "IsUnitCancel", type: "bool", value: IsUnitCancel, nullable: true}, {name: "JournalParent", type: "bool", value: JournalParent, nullable: true}, {name: "ChangeFreeJournal", type: "bool", value: ChangeFreeJournal, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: true}, {name: "IsPostalAuthenticated", type: "bool", value: IsPostalAuthenticated, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "AddressDistrict", type: "string", value: AddressDistrict, nullable: true}, {name: "PostalDistrict", type: "string", value: PostalDistrict, nullable: true}, {name: "NewDisplayName", type: "string", value: NewDisplayName, nullable: true}, {name: "CompleteDisplayName", type: "string", value: CompleteDisplayName, nullable: true}, {name: "ID_PersonChangeName", type: "int", value: ID_PersonChangeName, nullable: true}, {name: "PersonChangeName", type: "string", value: PersonChangeName, nullable: true}, {name: "DateChangeName", type: "string", value: DateChangeName, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "ID_TempFilePropertyAgreement", type: "string", value: ID_TempFilePropertyAgreement, nullable: true}, {name: "PropertyAgreementContent", type: "string", value: PropertyAgreementContent, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonUpdateUser = function(ID_Login, ID, UserName, SecurityCode, Overwrite, callback) {
  this.soapRequest("https://is.skaut.cz/PersonUpdateUser", "PersonUpdateUser", "personUpdateUserInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "UserName", type: "string", value: UserName, nullable: true}, {name: "SecurityCode", type: "string", value: SecurityCode, nullable: true}, {name: "Overwrite", type: "bool", value: Overwrite, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetail", "PersonDetail", "personDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"DegreeInFrontOf","paramType":"s:string"},{"paramName":"DegreeBehind","paramType":"s:string"},{"paramName":"SecurityCode","paramType":"s:string"},{"paramName":"IdentificationCode","paramType":"s:string"},{"paramName":"IdentificationCodeHasPermission","paramType":"s:boolean"},{"paramName":"FirstName","paramType":"s:string"},{"paramName":"LastName","paramType":"s:string"},{"paramName":"NickName","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"State","paramType":"s:string"},{"paramName":"PostalFirstLine","paramType":"s:string"},{"paramName":"PostalStreet","paramType":"s:string"},{"paramName":"PostalCity","paramType":"s:string"},{"paramName":"PostalPostcode","paramType":"s:string"},{"paramName":"PostalState","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"ID_Sex","paramType":"s:string"},{"paramName":"Sex","paramType":"s:string"},{"paramName":"Birthday","paramType":"s:dateTime"},{"paramName":"BirthdayYear","paramType":"s:int"},{"paramName":"IsForeign","paramType":"s:boolean"},{"paramName":"YearFrom","paramType":"s:int"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"ID_User","paramType":"s:int"},{"paramName":"GenerateSecurityCode","paramType":"s:boolean"},{"paramName":"OnlyValidate","paramType":"s:boolean"},{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoContent","paramType":"s:base64Binary"},{"paramName":"MaidenName","paramType":"s:string"},{"paramName":"ID_PersonType","paramType":"s:string"},{"paramName":"PersonType","paramType":"s:string"},{"paramName":"Email","paramType":"s:string"},{"paramName":"School","paramType":"s:string"},{"paramName":"DisplayAdress","paramType":"s:boolean"},{"paramName":"DisplayBirthday","paramType":"s:boolean"},{"paramName":"DisplayEducation","paramType":"s:boolean"},{"paramName":"DisplayEducationSeminary","paramType":"s:boolean"},{"paramName":"DisplayFunction","paramType":"s:boolean"},{"paramName":"DisplayMembership","paramType":"s:boolean"},{"paramName":"DisplayOffer","paramType":"s:boolean"},{"paramName":"DisplayPostalAdress","paramType":"s:boolean"},{"paramName":"DisplaySchool","paramType":"s:boolean"},{"paramName":"DisplayQualification","paramType":"s:boolean"},{"paramName":"DisplayYearFrom","paramType":"s:boolean"},{"paramName":"CatalogDisplay","paramType":"s:boolean"},{"paramName":"CatalogContactCount","paramType":"s:int"},{"paramName":"ID_PersonContactGa","paramType":"s:int"},{"paramName":"PersonContactGa","paramType":"s:string"},{"paramName":"ID_MemberCard","paramType":"s:int"},{"paramName":"PhotoX","paramType":"s:int"},{"paramName":"PhotoY","paramType":"s:int"},{"paramName":"PhotoSize","paramType":"s:int"},{"paramName":"IsPostalAuthenticated","paramType":"s:boolean"},{"paramName":"IsAddressAuthenticated","paramType":"s:boolean"},{"paramName":"AddressDistrict","paramType":"s:string"},{"paramName":"PostalDistrict","paramType":"s:string"},{"paramName":"UnitEnrollExtension","paramType":"s:string"},{"paramName":"UnitEnroll","paramType":"s:base64Binary"},{"paramName":"RejectDataStorage","paramType":"s:boolean"},{"paramName":"HasMembership","paramType":"s:boolean"},{"paramName":"IsLegacyMemberRead","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.UnitDetail = function(ID_Login, ID_Application, ID, FindStredisko, callback) {
  this.soapRequest("https://is.skaut.cz/UnitDetail", "UnitDetail", "unitDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "FindStredisko", type: "bool", value: FindStredisko, nullable: true}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"OnlyValidate","paramType":"s:boolean"},{"paramName":"IsPropertyOwner","paramType":"s:boolean"},{"paramName":"ID_JournalNovice","paramType":"s:string"},{"paramName":"FullDisplayName","paramType":"s:string"},{"paramName":"ID_Group","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"ID_UnitType","paramType":"s:string"},{"paramName":"UnitType","paramType":"s:string"},{"paramName":"ContainsMembers","paramType":"s:boolean"},{"paramName":"CommissionDeadline","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"SortName","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"ShortRegistrationNumber","paramType":"s:string"},{"paramName":"Location","paramType":"s:string"},{"paramName":"IC","paramType":"s:string"},{"paramName":"IsVatPayer","paramType":"s:boolean"},{"paramName":"DIC","paramType":"s:string"},{"paramName":"FileReference","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"State","paramType":"s:string"},{"paramName":"PostalFirstLine","paramType":"s:string"},{"paramName":"PostalStreet","paramType":"s:string"},{"paramName":"PostalCity","paramType":"s:string"},{"paramName":"PostalPostcode","paramType":"s:string"},{"paramName":"PostalState","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"ID_TroopArt","paramType":"s:int"},{"paramName":"TroopArt","paramType":"s:string"},{"paramName":"CanUpdateRegistrationNumber","paramType":"s:boolean"},{"paramName":"LogoContent","paramType":"s:base64Binary"},{"paramName":"LogoExtension","paramType":"s:string"},{"paramName":"IsUnitCancel","paramType":"s:boolean"},{"paramName":"JournalParent","paramType":"s:boolean"},{"paramName":"ChangeFreeJournal","paramType":"s:boolean"},{"paramName":"ID_UnitParent","paramType":"s:int"},{"paramName":"IsPostalAuthenticated","paramType":"s:boolean"},{"paramName":"IsAddressAuthenticated","paramType":"s:boolean"},{"paramName":"AddressDistrict","paramType":"s:string"},{"paramName":"PostalDistrict","paramType":"s:string"},{"paramName":"NewDisplayName","paramType":"s:string"},{"paramName":"CompleteDisplayName","paramType":"s:string"},{"paramName":"ID_PersonChangeName","paramType":"s:int"},{"paramName":"PersonChangeName","paramType":"s:string"},{"paramName":"DateChangeName","paramType":"s:dateTime"},{"paramName":"PropertyAgreementExtension","paramType":"s:string"},{"paramName":"ID_TempFilePropertyAgreement","paramType":"s1:guid"},{"paramName":"PropertyAgreementContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.AlignmentDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/AlignmentDetail", "AlignmentDetail", "alignmentDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"ID_AlignmentType","paramType":"s:int"},{"paramName":"AlignmentType","paramType":"s:string"},{"paramName":"ColorMargin","paramType":"s:string"},{"paramName":"ColorCenter","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.AlignmentInsert = function(ID_Login, ID, ID_Unit, Unit, ValidFrom, ValidTo, ID_AlignmentType, AlignmentType, ColorMargin, ColorCenter, callback) {
  this.soapRequest("https://is.skaut.cz/AlignmentInsert", "AlignmentInsert", "alignment", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_AlignmentType", type: "int", value: ID_AlignmentType, nullable: true}, {name: "AlignmentType", type: "string", value: AlignmentType, nullable: true}, {name: "ColorMargin", type: "string", value: ColorMargin, nullable: true}, {name: "ColorCenter", type: "string", value: ColorCenter, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.AlignmentTypeAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/AlignmentTypeAll", "AlignmentTypeAll", "alignmentTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.AlignmentUpdate = function(ID_Login, ID, ID_Unit, Unit, ValidFrom, ValidTo, ID_AlignmentType, AlignmentType, ColorMargin, ColorCenter, callback) {
  this.soapRequest("https://is.skaut.cz/AlignmentUpdate", "AlignmentUpdate", "alignment", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_AlignmentType", type: "int", value: ID_AlignmentType, nullable: true}, {name: "AlignmentType", type: "string", value: AlignmentType, nullable: true}, {name: "ColorMargin", type: "string", value: ColorMargin, nullable: true}, {name: "ColorCenter", type: "string", value: ColorCenter, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.AssuranceAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/AssuranceAll", "AssuranceAll", "assuranceAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.BankAll = function(ID_Login, DisplayName, Code, callback) {
  this.soapRequest("https://is.skaut.cz/BankAll", "BankAll", "bankAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.BankDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/BankDetail", "BankDetail", "bankDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Code","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.ContactTypeAll = function(ID_Login, DisplayName, IsForPerson, IsForUnit, ID, callback) {
  this.soapRequest("https://is.skaut.cz/ContactTypeAll", "ContactTypeAll", "contactTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "IsForPerson", type: "bool", value: IsForPerson, nullable: true}, {name: "IsForUnit", type: "bool", value: IsForUnit, nullable: true}, {name: "ID", type: "string", value: ID, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.EducatationSeminaryAll = function(ID_Login, ID_Person, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/EducatationSeminaryAll", "EducatationSeminaryAll", "educatationSeminaryAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.EducatationSeminaryDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/EducatationSeminaryDelete", "EducatationSeminaryDelete", "educatationSeminaryDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.EducatationSeminaryInsert = function(ID_Login, ID_Person, ID, DisplayName, YearFrom, Note, callback) {
  this.soapRequest("https://is.skaut.cz/EducatationSeminaryInsert", "EducatationSeminaryInsert", "educatationSeminary", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "YearFrom", type: "int", value: YearFrom, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.EducatationSeminaryUpdate = function(ID_Login, ID_Person, ID, DisplayName, YearFrom, Note, callback) {
  this.soapRequest("https://is.skaut.cz/EducatationSeminaryUpdate", "EducatationSeminaryUpdate", "educatationSeminary", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "YearFrom", type: "int", value: YearFrom, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonAllEventCongressFunction = function(ID_Login, ID, DisplayName, ID_EventCongressFunction, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllEventCongressFunction", "PersonAllEventCongressFunction", "personAllEventCongressFunctionInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_EventCongressFunction", type: "int", value: ID_EventCongressFunction, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.PersonOtherDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonOtherDetail", "PersonOtherDetail", "personOtherDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"BirthCity","paramType":"s:string"},{"paramName":"ID_Citizenship","paramType":"s:string"},{"paramName":"Citizenship","paramType":"s:string"},{"paramName":"Person","paramType":"s:string"},{"paramName":"MaidenName","paramType":"s:string"},{"paramName":"ID_DistrictBirth","paramType":"s:int"},{"paramName":"DistrictBirth","paramType":"s:string"},{"paramName":"ID_Assurance","paramType":"s:int"},{"paramName":"Assurance","paramType":"s:string"},{"paramName":"InsuranceNumber","paramType":"s:string"},{"paramName":"Allergy","paramType":"s:string"},{"paramName":"Drugs","paramType":"s:string"},{"paramName":"HealthLimitation","paramType":"s:string"},{"paramName":"BodySkills","paramType":"s:string"},{"paramName":"School","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"RejectDataStorage","paramType":"s:boolean"},{"paramName":"RejectAudiovisual","paramType":"s:boolean"},{"paramName":"IsRPS","paramType":"s:boolean"},{"paramName":"IsEPS","paramType":"s:boolean"},{"paramName":"IsEduParticipantExt","paramType":"s:boolean"},{"paramName":"OnlyValidate","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.PersonOtherUpdate = function(ID_Login, ID, ID_Person, BirthCity, ID_Citizenship, Citizenship, Person, MaidenName, ID_DistrictBirth, DistrictBirth, ID_Assurance, Assurance, InsuranceNumber, Allergy, Drugs, HealthLimitation, BodySkills, School, Note, RejectDataStorage, RejectAudiovisual, IsRPS, IsEPS, IsEduParticipantExt, OnlyValidate, callback) {
  this.soapRequest("https://is.skaut.cz/PersonOtherUpdate", "PersonOtherUpdate", "personOther", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "BirthCity", type: "string", value: BirthCity, nullable: true}, {name: "ID_Citizenship", type: "string", value: ID_Citizenship, nullable: true}, {name: "Citizenship", type: "string", value: Citizenship, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "MaidenName", type: "string", value: MaidenName, nullable: true}, {name: "ID_DistrictBirth", type: "int", value: ID_DistrictBirth, nullable: true}, {name: "DistrictBirth", type: "string", value: DistrictBirth, nullable: true}, {name: "ID_Assurance", type: "int", value: ID_Assurance, nullable: true}, {name: "Assurance", type: "string", value: Assurance, nullable: true}, {name: "InsuranceNumber", type: "string", value: InsuranceNumber, nullable: true}, {name: "Allergy", type: "string", value: Allergy, nullable: true}, {name: "Drugs", type: "string", value: Drugs, nullable: true}, {name: "HealthLimitation", type: "string", value: HealthLimitation, nullable: true}, {name: "BodySkills", type: "string", value: BodySkills, nullable: true}, {name: "School", type: "string", value: School, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "RejectDataStorage", type: "bool", value: RejectDataStorage, nullable: true}, {name: "RejectAudiovisual", type: "bool", value: RejectAudiovisual, nullable: true}, {name: "IsRPS", type: "bool", value: IsRPS, nullable: true}, {name: "IsEPS", type: "bool", value: IsEPS, nullable: true}, {name: "IsEduParticipantExt", type: "bool", value: IsEduParticipantExt, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonPhoto = function(ID_Login, ID, Size, callback) {
  this.soapRequest("https://is.skaut.cz/PersonPhoto", "PersonPhoto", "personPhotoInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "Size", type: "string", value: Size, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"PhotoContent","paramType":"s:base64Binary"},{"paramName":"PhotoExtension","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.FunctionAllRegistry = function(ID_Login, ID_Application, ID_Unit, ReturnStatutory, ReturnAssistant, ReturnContact, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionAllRegistry", "FunctionAllRegistry", "functionAllRegistryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ReturnStatutory", type: "bool", value: ReturnStatutory, nullable: true}, {name: "ReturnAssistant", type: "bool", value: ReturnAssistant, nullable: true}, {name: "ReturnContact", type: "bool", value: ReturnContact, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MeetingDateAll = function(ID_Login, ID_Application, ID_Unit, ID_Occupation, ID_WeekDay, callback) {
  this.soapRequest("https://is.skaut.cz/MeetingDateAll", "MeetingDateAll", "meetingDateAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID_WeekDay", type: "string", value: ID_WeekDay, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MeetingDateDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MeetingDateDelete", "MeetingDateDelete", "meetingDateDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.MeetingDateDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MeetingDateDetail", "MeetingDateDetail", "meetingDateDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"ID_WeekDay","paramType":"s:string"},{"paramName":"WeekDay","paramType":"s:string"},{"paramName":"TimeFrom","paramType":"s:duration"},{"paramName":"TimeTo","paramType":"s:duration"},{"paramName":"Periodicity","paramType":"s:string"},{"paramName":"ID_Occupation","paramType":"s:int"},{"paramName":"Occupation","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.MeetingDateInsert = function(ID_Login, ID, DisplayName, ID_Unit, Unit, ID_WeekDay, WeekDay, TimeFrom, TimeTo, Periodicity, ID_Occupation, Occupation, callback) {
  this.soapRequest("https://is.skaut.cz/MeetingDateInsert", "MeetingDateInsert", "meetingDate", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ID_WeekDay", type: "string", value: ID_WeekDay, nullable: true}, {name: "WeekDay", type: "string", value: WeekDay, nullable: true}, {name: "TimeFrom", type: "string", value: TimeFrom, nullable: true}, {name: "TimeTo", type: "string", value: TimeTo, nullable: true}, {name: "Periodicity", type: "string", value: Periodicity, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "Occupation", type: "string", value: Occupation, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.MeetingDateUpdate = function(ID_Login, ID, DisplayName, ID_Unit, Unit, ID_WeekDay, WeekDay, TimeFrom, TimeTo, Periodicity, ID_Occupation, Occupation, callback) {
  this.soapRequest("https://is.skaut.cz/MeetingDateUpdate", "MeetingDateUpdate", "meetingDate", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ID_WeekDay", type: "string", value: ID_WeekDay, nullable: true}, {name: "WeekDay", type: "string", value: WeekDay, nullable: true}, {name: "TimeFrom", type: "string", value: TimeFrom, nullable: true}, {name: "TimeTo", type: "string", value: TimeTo, nullable: true}, {name: "Periodicity", type: "string", value: Periodicity, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "Occupation", type: "string", value: Occupation, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitAllRegistry = function(ID_Login, ID_Application, DisplayName, IC, RegistrationNumber, Location, ParentDisplayName, ParentRegistrationNumber, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/UnitAllRegistry", "UnitAllRegistry", "unitAllRegistryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "ParentDisplayName", type: "string", value: ParentDisplayName, nullable: true}, {name: "ParentRegistrationNumber", type: "string", value: ParentRegistrationNumber, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitCancelAll = function(ID_Login, ID_Application, ID_Unit, ID_Person, ID_UnitCancelType, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/UnitCancelAll", "UnitCancelAll", "unitCancelAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_UnitCancelType", type: "string", value: ID_UnitCancelType, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitCancelInsert = function(ID_Login, ID, ID_Unit, Unit, ID_UnitCancelType, UnitCancelType, DateDecision, Description, ID_Person, Person, ValidTo, callback) {
  this.soapRequest("https://is.skaut.cz/UnitCancelInsert", "UnitCancelInsert", "unitCancel", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ID_UnitCancelType", type: "string", value: ID_UnitCancelType, nullable: true}, {name: "UnitCancelType", type: "string", value: UnitCancelType, nullable: true}, {name: "DateDecision", type: "string", value: DateDecision, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitCancelTypeAll = function(ID_Login, ID_Unit, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/UnitCancelTypeAll", "UnitCancelTypeAll", "unitCancelTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitDetailMembersRegistry = function(ID_Login, ID_Application, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitDetailMembersRegistry", "UnitDetailMembersRegistry", "unitDetailMembersRegistryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}], [{"paramName":"Year","paramType":"s:int"},{"paramName":"MembersTo6","paramType":"s:int"},{"paramName":"MembersTo15","paramType":"s:int"},{"paramName":"MembersTo18","paramType":"s:int"},{"paramName":"MembersTo26","paramType":"s:int"},{"paramName":"MembersFrom26","paramType":"s:int"},{"paramName":"RegularMembersTo6","paramType":"s:int"},{"paramName":"RegularMembersTo15","paramType":"s:int"},{"paramName":"RegularMembersTo18","paramType":"s:int"},{"paramName":"RegularMembersTo26","paramType":"s:int"},{"paramName":"RegularMembersFrom26","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitDetailRegistry = function(ID_Login, ID_Application, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitDetailRegistry", "UnitDetailRegistry", "unitDetailRegistryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"IC","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"State","paramType":"s:string"},{"paramName":"PostalFirstLine","paramType":"s:string"},{"paramName":"PostalStreet","paramType":"s:string"},{"paramName":"PostalCity","paramType":"s:string"},{"paramName":"PostalPostcode","paramType":"s:string"},{"paramName":"PostalState","paramType":"s:string"},{"paramName":"ID_UnitParent","paramType":"s:int"},{"paramName":"UnitParent","paramType":"s:string"},{"paramName":"ParentRegistrationNumber","paramType":"s:string"},{"paramName":"DateFrom","paramType":"s:dateTime"},{"paramName":"DateTo","paramType":"s:dateTime"},{"paramName":"DIC","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.UnitLogo = function(ID_Login, ID_Application, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitLogo", "UnitLogo", "unitLogoInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"LogoContent","paramType":"s:base64Binary"},{"paramName":"LogoExtension","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.UnitRegistrationMembers = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationMembers", "UnitRegistrationMembers", "unitRegistrationMembersInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.StatementErrors = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/StatementErrors", "StatementErrors", "statementErrorsInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.StatementComputeIsError = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Year, ID_StatementType, StatementType, IsError, IsDelivered, DateDelivered, IsThousands, IsConsultant, callback) {
  this.soapRequest("https://is.skaut.cz/StatementComputeIsError", "StatementComputeIsError", "statement", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "ID_StatementType", type: "string", value: ID_StatementType, nullable: true}, {name: "StatementType", type: "string", value: StatementType, nullable: true}, {name: "IsError", type: "bool", value: IsError, nullable: true}, {name: "IsDelivered", type: "bool", value: IsDelivered, nullable: true}, {name: "DateDelivered", type: "string", value: DateDelivered, nullable: true}, {name: "IsThousands", type: "bool", value: IsThousands, nullable: true}, {name: "IsConsultant", type: "bool", value: IsConsultant, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.StatementAllChild = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/StatementAllChild", "StatementAllChild", "statementAllChildInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.StatementEntryAllTotals = function(ID_Login, ID_Statement, ID_StatementEntryType, callback) {
  this.soapRequest("https://is.skaut.cz/StatementEntryAllTotals", "StatementEntryAllTotals", "statementEntryAllTotalsInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Statement", type: "int", value: ID_Statement, nullable: false}, {name: "ID_StatementEntryType", type: "int", value: ID_StatementEntryType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitTreeRenew = function(ID_Login, ID, ValidFrom, ValidTo, ID_UnitTreeReason, ID_Unit, Unit, ID_UnitParent, UnitParent, RegistrationNumber, ID_UnitType, ID_UnitMerge, UnitMerge, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTreeRenew", "UnitTreeRenew", "unitTree", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_UnitTreeReason", type: "string", value: ID_UnitTreeReason, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: true}, {name: "UnitParent", type: "string", value: UnitParent, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "ID_UnitMerge", type: "int", value: ID_UnitMerge, nullable: true}, {name: "UnitMerge", type: "string", value: UnitMerge, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MistakeDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MistakeDetail", "MistakeDetail", "mistakeDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"IsUnit","paramType":"s:boolean"},{"paramName":"ID_MistakeType","paramType":"s:string"},{"paramName":"MistakeType","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.PersonDetailIdentificationCode = function(ID_Login, ID_Unit, IdentificationCode, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetailIdentificationCode", "PersonDetailIdentificationCode", "personDetailIdentificationCodeInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"HasMembership","paramType":"s:boolean"},{"paramName":"MembershipSameUnit","paramType":"s:boolean"},{"paramName":"StejneStredisko","paramType":"s:boolean"},{"paramName":"UnitPerson","paramType":"s:string"},{"paramName":"Leader","paramType":"s:string"},{"paramName":"MembershipType","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.UnitAllUnit = function(ID_Login, ID_Unit, SearchStredisko, callback) {
  this.soapRequest("https://is.skaut.cz/UnitAllUnit", "UnitAllUnit", "unitAllUnitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "SearchStredisko", type: "bool", value: SearchStredisko, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MembershipRenew = function(ID_Login, ID, ID_Unit, ID_Person, Person, ValidFrom, ValidTo, ID_MembershipType, ID_MembershipCategory, ID_MembershipReason, CreateNew, OnlyValidate, IsFunction, IsSts, IsUnique, IsUnitFunction, IsDelegate, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipRenew", "MembershipRenew", "membership", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "ID_MembershipReason", type: "string", value: ID_MembershipReason, nullable: true}, {name: "CreateNew", type: "bool", value: CreateNew, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "IsFunction", type: "bool", value: IsFunction, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}, {name: "IsUnique", type: "bool", value: IsUnique, nullable: true}, {name: "IsUnitFunction", type: "bool", value: IsUnitFunction, nullable: true}, {name: "IsDelegate", type: "bool", value: IsDelegate, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonAllHelpdesk = function(ID_Login, FirstName, LastName, NickName, IdentificationCode, City, UserName, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllHelpdesk", "PersonAllHelpdesk", "personAllHelpdeskInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "NickName", type: "string", value: NickName, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "UserName", type: "string", value: UserName, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RequestAll = function(ID_Login, ID_Person, ID_UserCreate, ID_Unit, ID_UserDecision, ID_MembershipType, ID_MembershipCategory, ID_RequestState, callback) {
  this.soapRequest("https://is.skaut.cz/RequestAll", "RequestAll", "requestAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_UserCreate", type: "int", value: ID_UserCreate, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_UserDecision", type: "int", value: ID_UserDecision, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "ID_RequestState", type: "string", value: ID_RequestState, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RequestDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RequestDetail", "RequestDetail", "requestDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"IdentificationCode","paramType":"s:string"},{"paramName":"Person","paramType":"s:string"},{"paramName":"Reason","paramType":"s:string"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ID_MembershipType","paramType":"s:string"},{"paramName":"MembershipType","paramType":"s:string"},{"paramName":"ID_MembershipCategory","paramType":"s:string"},{"paramName":"MembershipCategory","paramType":"s:string"},{"paramName":"ID_UserCreate","paramType":"s:int"},{"paramName":"ID_PersonCreate","paramType":"s:int"},{"paramName":"PersonCreate","paramType":"s:string"},{"paramName":"DateCreate","paramType":"s:dateTime"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"ID_RequestState","paramType":"s:string"},{"paramName":"RequestState","paramType":"s:string"},{"paramName":"ID_UserDecision","paramType":"s:int"},{"paramName":"ID_PersonDecision","paramType":"s:int"},{"paramName":"PersonDecision","paramType":"s:string"},{"paramName":"DateDecision","paramType":"s:dateTime"},{"paramName":"Decision","paramType":"s:string"},{"paramName":"NewMembership","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.RequestInsert = function(ID_Login, ID, ID_Person, IdentificationCode, Person, Reason, ValidFrom, ID_MembershipType, MembershipType, ID_MembershipCategory, MembershipCategory, ID_UserCreate, ID_PersonCreate, PersonCreate, DateCreate, ID_Unit, Unit, RegistrationNumber, ID_RequestState, RequestState, ID_UserDecision, ID_PersonDecision, PersonDecision, DateDecision, Decision, NewMembership, callback) {
  this.soapRequest("https://is.skaut.cz/RequestInsert", "RequestInsert", "request", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Reason", type: "string", value: Reason, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "MembershipType", type: "string", value: MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "MembershipCategory", type: "string", value: MembershipCategory, nullable: true}, {name: "ID_UserCreate", type: "int", value: ID_UserCreate, nullable: true}, {name: "ID_PersonCreate", type: "int", value: ID_PersonCreate, nullable: true}, {name: "PersonCreate", type: "string", value: PersonCreate, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_RequestState", type: "string", value: ID_RequestState, nullable: true}, {name: "RequestState", type: "string", value: RequestState, nullable: true}, {name: "ID_UserDecision", type: "int", value: ID_UserDecision, nullable: true}, {name: "ID_PersonDecision", type: "int", value: ID_PersonDecision, nullable: true}, {name: "PersonDecision", type: "string", value: PersonDecision, nullable: true}, {name: "DateDecision", type: "string", value: DateDecision, nullable: true}, {name: "Decision", type: "string", value: Decision, nullable: true}, {name: "NewMembership", type: "bool", value: NewMembership, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RequestStateAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/RequestStateAll", "RequestStateAll", "requestStateAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RequestUpdate = function(ID_Login, ID, ID_Person, IdentificationCode, Person, Reason, ValidFrom, ID_MembershipType, MembershipType, ID_MembershipCategory, MembershipCategory, ID_UserCreate, ID_PersonCreate, PersonCreate, DateCreate, ID_Unit, Unit, RegistrationNumber, ID_RequestState, RequestState, ID_UserDecision, ID_PersonDecision, PersonDecision, DateDecision, Decision, NewMembership, callback) {
  this.soapRequest("https://is.skaut.cz/RequestUpdate", "RequestUpdate", "request", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Reason", type: "string", value: Reason, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "MembershipType", type: "string", value: MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "MembershipCategory", type: "string", value: MembershipCategory, nullable: true}, {name: "ID_UserCreate", type: "int", value: ID_UserCreate, nullable: true}, {name: "ID_PersonCreate", type: "int", value: ID_PersonCreate, nullable: true}, {name: "PersonCreate", type: "string", value: PersonCreate, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_RequestState", type: "string", value: ID_RequestState, nullable: true}, {name: "RequestState", type: "string", value: RequestState, nullable: true}, {name: "ID_UserDecision", type: "int", value: ID_UserDecision, nullable: true}, {name: "ID_PersonDecision", type: "int", value: ID_PersonDecision, nullable: true}, {name: "PersonDecision", type: "string", value: PersonDecision, nullable: true}, {name: "DateDecision", type: "string", value: DateDecision, nullable: true}, {name: "Decision", type: "string", value: Decision, nullable: true}, {name: "NewMembership", type: "bool", value: NewMembership, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitRegistrationReport = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationReport", "UnitRegistrationReport", "UnitRegistrationReportInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllExport = function(ID_Login, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllExport", "PersonAllExport", "personAllExportInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.UnitRegistrationAllChild = function(ID_Login, ID_UnitRegistration, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationAllChild", "UnitRegistrationAllChild", "unitRegistrationAllChildInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistration", type: "int", value: ID_UnitRegistration, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.FunctionUpdateHistory = function(ID_Login, ID, ValidFrom, ValidTo, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, ID_Role, IsDeleteRole, Specification, ID_TempFile, AgreementExtension, AgreementConfirmed, AgreementNeeded, AgreementCanUpload, AgreementCanConfirm, AgreementCanView, Code, Number, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionUpdateHistory", "FunctionUpdateHistory", "function", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "IsDeleteRole", type: "bool", value: IsDeleteRole, nullable: true}, {name: "Specification", type: "string", value: Specification, nullable: true}, {name: "ID_TempFile", type: "string", value: ID_TempFile, nullable: true}, {name: "AgreementExtension", type: "string", value: AgreementExtension, nullable: true}, {name: "AgreementConfirmed", type: "string", value: AgreementConfirmed, nullable: true}, {name: "AgreementNeeded", type: "bool", value: AgreementNeeded, nullable: true}, {name: "AgreementCanUpload", type: "bool", value: AgreementCanUpload, nullable: true}, {name: "AgreementCanConfirm", type: "bool", value: AgreementCanConfirm, nullable: true}, {name: "AgreementCanView", type: "bool", value: AgreementCanView, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "Number", type: "string", value: Number, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.FunctionInsertHistory = function(ID_Login, ID, ValidFrom, ValidTo, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, ID_Role, IsDeleteRole, Specification, ID_TempFile, AgreementExtension, AgreementConfirmed, AgreementNeeded, AgreementCanUpload, AgreementCanConfirm, AgreementCanView, Code, Number, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionInsertHistory", "FunctionInsertHistory", "function", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "IsDeleteRole", type: "bool", value: IsDeleteRole, nullable: true}, {name: "Specification", type: "string", value: Specification, nullable: true}, {name: "ID_TempFile", type: "string", value: ID_TempFile, nullable: true}, {name: "AgreementExtension", type: "string", value: AgreementExtension, nullable: true}, {name: "AgreementConfirmed", type: "string", value: AgreementConfirmed, nullable: true}, {name: "AgreementNeeded", type: "bool", value: AgreementNeeded, nullable: true}, {name: "AgreementCanUpload", type: "bool", value: AgreementCanUpload, nullable: true}, {name: "AgreementCanConfirm", type: "bool", value: AgreementCanConfirm, nullable: true}, {name: "AgreementCanView", type: "bool", value: AgreementCanView, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "Number", type: "string", value: Number, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.FunctionDeleteHistory = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionDeleteHistory", "FunctionDeleteHistory", "functionDeleteHistoryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.QualificationDeleteHistory = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationDeleteHistory", "QualificationDeleteHistory", "qualificationDeleteHistoryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.QualificationInsertHistory = function(ID_Login, ID_Person, Person, ID, ValidFrom, ValidTo, ID_QualificationType, QualificationType, LetterNumber, Note, IsUsed, SendMessage, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationInsertHistory", "QualificationInsertHistory", "qualification", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "QualificationType", type: "string", value: QualificationType, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsUsed", type: "bool", value: IsUsed, nullable: true}, {name: "SendMessage", type: "bool", value: SendMessage, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.QualificationUpdateHistory = function(ID_Login, ID_Person, Person, ID, ValidFrom, ValidTo, ID_QualificationType, QualificationType, LetterNumber, Note, IsUsed, SendMessage, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationUpdateHistory", "QualificationUpdateHistory", "qualification", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "QualificationType", type: "string", value: QualificationType, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsUsed", type: "bool", value: IsUsed, nullable: true}, {name: "SendMessage", type: "bool", value: SendMessage, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitRegistrationSummary = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationSummary", "UnitRegistrationSummary", "unitRegistrationSummaryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllLogin = function(ID_Login, FirstName, LastName, NickName, IdentificationCode, Birthday, ID_MembershipType, ID_MembershipCategory, Phone, Email, City, IdentificationCodeStartsWith, RegistrationNumber, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllLogin", "PersonAllLogin", "personAllLoginInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "NickName", type: "string", value: NickName, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "Phone", type: "string", value: Phone, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "IdentificationCodeStartsWith", type: "string", value: IdentificationCodeStartsWith, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonDetailSecurityCode = function(ID_Login, UserName, SecurityCode, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetailSecurityCode", "PersonDetailSecurityCode", "personDetailSecurityCodeInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "UserName", type: "string", value: UserName, nullable: true}, {name: "SecurityCode", type: "string", value: SecurityCode, nullable: true}], [{"paramName":"IdentificationCode","paramType":"s:string"},{"paramName":"FirstName","paramType":"s:string"},{"paramName":"LastName","paramType":"s:string"},{"paramName":"NickName","paramType":"s:string"},{"paramName":"Email","paramType":"s:string"},{"paramName":"IsBlank","paramType":"s:boolean"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"State","paramType":"s:string"},{"paramName":"PostalFirstLine","paramType":"s:string"},{"paramName":"PostalStreet","paramType":"s:string"},{"paramName":"PostalCity","paramType":"s:string"},{"paramName":"PostalPostcode","paramType":"s:string"},{"paramName":"PostalState","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.PersonParseIdentificationCode = function(ID_Login, IdentificationCode, callback) {
  this.soapRequest("https://is.skaut.cz/PersonParseIdentificationCode", "PersonParseIdentificationCode", "personParseIdentificationCodeInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}], [{"paramName":"Birthday","paramType":"s:dateTime"},{"paramName":"ID_Sex","paramType":"s:string"},{"paramName":"IsValid","paramType":"s:boolean"},{"paramName":"ID_MembershipCategory","paramType":"s:string"},{"paramName":"Exists","paramType":"s:boolean"},{"paramName":"Age","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.PersonRegistrationAllPerson = function(ID_Login, ID_Person, Year, Unit, IsLastRegistration, callback) {
  this.soapRequest("https://is.skaut.cz/PersonRegistrationAllPerson", "PersonRegistrationAllPerson", "personRegistrationAllPersonInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "IsLastRegistration", type: "bool", value: IsLastRegistration, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.FunctionAllPerson = function(ID_Login, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, IsValid, IsOficial, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionAllPerson", "FunctionAllPerson", "functionAllPersonInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}, {name: "IsOficial", type: "bool", value: IsOficial, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MembershipAllPerson = function(ID_Login, ID_Person, ID_Unit, ID_MembershipType, ID_MembershipCategory, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipAllPerson", "MembershipAllPerson", "membershipAllPersonInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllRegistrationCategory = function(ID_Login, ID_RegistrationCategory, ID, IncludeChild, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllRegistrationCategory", "PersonAllRegistrationCategory", "personAllRegistrationCategoryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_RegistrationCategory", type: "int", value: ID_RegistrationCategory, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "IncludeChild", type: "bool", value: IncludeChild, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonMistakeReportDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonMistakeReportDelete", "PersonMistakeReportDelete", "personMistakeReportDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.PersonMistakeReportInsert = function(ID_Login, ID, ID_Person, Person, ID_Mistake, Mistake, DisplayName, ParentComment, callback) {
  this.soapRequest("https://is.skaut.cz/PersonMistakeReportInsert", "PersonMistakeReportInsert", "personMistakeReport", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_Mistake", type: "int", value: ID_Mistake, nullable: true}, {name: "Mistake", type: "string", value: Mistake, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ParentComment", type: "string", value: ParentComment, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.PersonRegistrationAll = function(ID_Login, ID_UnitRegistration, IncludeChild, callback) {
  this.soapRequest("https://is.skaut.cz/PersonRegistrationAll", "PersonRegistrationAll", "personRegistrationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistration", type: "int", value: ID_UnitRegistration, nullable: false}, {name: "IncludeChild", type: "bool", value: IncludeChild, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonRegistrationDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonRegistrationDelete", "PersonRegistrationDelete", "personRegistrationDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.PersonRegistrationInsert = function(ID_Login, ID_Membership, ID_RegistrationCategory, ID_RegistrationServiceArray, callback) {
  this.soapRequest("https://is.skaut.cz/PersonRegistrationInsert", "PersonRegistrationInsert", "personRegistrationInsertInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Membership", type: "int", value: ID_Membership, nullable: false}, {name: "ID_RegistrationCategory", type: "int", value: ID_RegistrationCategory, nullable: true}, {name: "ID_RegistrationServiceArray", type: "string", value: ID_RegistrationServiceArray, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RegistrationCategoryCopyFromParentUnit = function(ID_Login, ID_UnitRegistrationCopy, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrationCategoryCopyFromParentUnit", "RegistrationCategoryCopyFromParentUnit", "registrationCategoryCopyFromParentUnitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistrationCopy", type: "int", value: ID_UnitRegistrationCopy, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.DegreeAll = function(ID_Login, ID_Person, ID_DegreeType, callback) {
  this.soapRequest("https://is.skaut.cz/DegreeAll", "DegreeAll", "degreeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID_DegreeType", type: "int", value: ID_DegreeType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.DegreeDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/DegreeDelete", "DegreeDelete", "degreeDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.DegreeInsert = function(ID_Login, ID_Person, ID, ID_DegreeType, callback) {
  this.soapRequest("https://is.skaut.cz/DegreeInsert", "DegreeInsert", "degree", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_DegreeType", type: "int", value: ID_DegreeType, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.DegreeTypeAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/DegreeTypeAll", "DegreeTypeAll", "degreeTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.DegreeUpdate = function(ID_Login, ID_Person, ID, ID_DegreeType, callback) {
  this.soapRequest("https://is.skaut.cz/DegreeUpdate", "DegreeUpdate", "degree", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_DegreeType", type: "int", value: ID_DegreeType, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.EducationAll = function(ID_Login, ID_Person, ID_EducationType, callback) {
  this.soapRequest("https://is.skaut.cz/EducationAll", "EducationAll", "educationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID_EducationType", type: "int", value: ID_EducationType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.EducationDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/EducationDelete", "EducationDelete", "educationDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.EducationInsert = function(ID_Login, ID_Person, ID, ID_EducationType, Note, callback) {
  this.soapRequest("https://is.skaut.cz/EducationInsert", "EducationInsert", "education", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_EducationType", type: "int", value: ID_EducationType, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.EducationTypeAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/EducationTypeAll", "EducationTypeAll", "educationTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.EducationUpdate = function(ID_Login, ID_Person, ID, ID_EducationType, Note, callback) {
  this.soapRequest("https://is.skaut.cz/EducationUpdate", "EducationUpdate", "education", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_EducationType", type: "int", value: ID_EducationType, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.FunctionAll = function(ID_Login, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, IsValid, IsAgency, ID_Agency, Person, IsStatutory, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionAll", "FunctionAll", "functionAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}, {name: "IsAgency", type: "bool", value: IsAgency, nullable: true}, {name: "ID_Agency", type: "int", value: ID_Agency, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "IsStatutory", type: "bool", value: IsStatutory, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.FunctionDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionDetail", "FunctionDetail", "functionDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"ID_FunctionType","paramType":"s:int"},{"paramName":"FunctionType","paramType":"s:string"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"ID_FunctionReason","paramType":"s:string"},{"paramName":"FunctionReason","paramType":"s:string"},{"paramName":"IsDefaultRole","paramType":"s:boolean"},{"paramName":"Specification","paramType":"s:string"},{"paramName":"IsUsed","paramType":"s:boolean"},{"paramName":"AgreementExtension","paramType":"s:string"},{"paramName":"AgreementConfirmed","paramType":"s:dateTime"},{"paramName":"AgreementNeeded","paramType":"s:boolean"},{"paramName":"AgreementCanUpload","paramType":"s:boolean"},{"paramName":"AgreementCanConfirm","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.FunctionInsert = function(ID_Login, ID, ValidFrom, ValidTo, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, ID_Role, IsDeleteRole, Specification, ID_TempFile, AgreementExtension, AgreementConfirmed, AgreementNeeded, AgreementCanUpload, AgreementCanConfirm, AgreementCanView, Code, Number, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionInsert", "FunctionInsert", "function", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "IsDeleteRole", type: "bool", value: IsDeleteRole, nullable: true}, {name: "Specification", type: "string", value: Specification, nullable: true}, {name: "ID_TempFile", type: "string", value: ID_TempFile, nullable: true}, {name: "AgreementExtension", type: "string", value: AgreementExtension, nullable: true}, {name: "AgreementConfirmed", type: "string", value: AgreementConfirmed, nullable: true}, {name: "AgreementNeeded", type: "bool", value: AgreementNeeded, nullable: true}, {name: "AgreementCanUpload", type: "bool", value: AgreementCanUpload, nullable: true}, {name: "AgreementCanConfirm", type: "bool", value: AgreementCanConfirm, nullable: true}, {name: "AgreementCanView", type: "bool", value: AgreementCanView, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "Number", type: "string", value: Number, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.FunctionReasonAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionReasonAll", "FunctionReasonAll", "functionReasonAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.FunctionTypeAll = function(ID_Login, DisplayName, ID_UnitType, ID_Role, IsElective, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionTypeAll", "FunctionTypeAll", "functionTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "IsElective", type: "bool", value: IsElective, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.FunctionTypeDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionTypeDelete", "FunctionTypeDelete", "functionTypeDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.FunctionTypeDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionTypeDetail", "FunctionTypeDetail", "functionTypeDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Code","paramType":"s:string"},{"paramName":"ID_UnitType","paramType":"s:string"},{"paramName":"ID_Role","paramType":"s:int"},{"paramName":"MinCount","paramType":"s:int"},{"paramName":"MaxCount","paramType":"s:int"},{"paramName":"Note","paramType":"s:string"},{"paramName":"IsStatutory","paramType":"s:boolean"},{"paramName":"IsAssistant","paramType":"s:boolean"},{"paramName":"IsAudit","paramType":"s:boolean"},{"paramName":"IsOficial","paramType":"s:boolean"},{"paramName":"IsElective","paramType":"s:boolean"},{"paramName":"IsNotCongress","paramType":"s:boolean"},{"paramName":"IsSpecification","paramType":"s:boolean"},{"paramName":"ID_Agency","paramType":"s:int"},{"paramName":"Agency","paramType":"s:string"},{"paramName":"Order","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.FunctionTypeInsert = function(ID_Login, ID, DisplayName, Code, ID_UnitType, ID_Role, MinCount, MaxCount, Note, IsStatutory, IsAssistant, IsAudit, IsOficial, IsElective, IsNotCongress, IsSpecification, ID_Agency, Agency, Order, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionTypeInsert", "FunctionTypeInsert", "functionType", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "MinCount", type: "int", value: MinCount, nullable: true}, {name: "MaxCount", type: "int", value: MaxCount, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsStatutory", type: "bool", value: IsStatutory, nullable: true}, {name: "IsAssistant", type: "bool", value: IsAssistant, nullable: true}, {name: "IsAudit", type: "bool", value: IsAudit, nullable: true}, {name: "IsOficial", type: "bool", value: IsOficial, nullable: true}, {name: "IsElective", type: "bool", value: IsElective, nullable: true}, {name: "IsNotCongress", type: "bool", value: IsNotCongress, nullable: true}, {name: "IsSpecification", type: "bool", value: IsSpecification, nullable: true}, {name: "ID_Agency", type: "int", value: ID_Agency, nullable: true}, {name: "Agency", type: "string", value: Agency, nullable: true}, {name: "Order", type: "int", value: Order, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.FunctionTypeUpdate = function(ID_Login, ID, DisplayName, Code, ID_UnitType, ID_Role, MinCount, MaxCount, Note, IsStatutory, IsAssistant, IsAudit, IsOficial, IsElective, IsNotCongress, IsSpecification, ID_Agency, Agency, Order, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionTypeUpdate", "FunctionTypeUpdate", "functionType", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "MinCount", type: "int", value: MinCount, nullable: true}, {name: "MaxCount", type: "int", value: MaxCount, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsStatutory", type: "bool", value: IsStatutory, nullable: true}, {name: "IsAssistant", type: "bool", value: IsAssistant, nullable: true}, {name: "IsAudit", type: "bool", value: IsAudit, nullable: true}, {name: "IsOficial", type: "bool", value: IsOficial, nullable: true}, {name: "IsElective", type: "bool", value: IsElective, nullable: true}, {name: "IsNotCongress", type: "bool", value: IsNotCongress, nullable: true}, {name: "IsSpecification", type: "bool", value: IsSpecification, nullable: true}, {name: "ID_Agency", type: "int", value: ID_Agency, nullable: true}, {name: "Agency", type: "string", value: Agency, nullable: true}, {name: "Order", type: "int", value: Order, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.FunctionUpdate = function(ID_Login, ID, ValidFrom, ValidTo, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, ID_Role, IsDeleteRole, Specification, ID_TempFile, AgreementExtension, AgreementConfirmed, AgreementNeeded, AgreementCanUpload, AgreementCanConfirm, AgreementCanView, Code, Number, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionUpdate", "FunctionUpdate", "function", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "IsDeleteRole", type: "bool", value: IsDeleteRole, nullable: true}, {name: "Specification", type: "string", value: Specification, nullable: true}, {name: "ID_TempFile", type: "string", value: ID_TempFile, nullable: true}, {name: "AgreementExtension", type: "string", value: AgreementExtension, nullable: true}, {name: "AgreementConfirmed", type: "string", value: AgreementConfirmed, nullable: true}, {name: "AgreementNeeded", type: "bool", value: AgreementNeeded, nullable: true}, {name: "AgreementCanUpload", type: "bool", value: AgreementCanUpload, nullable: true}, {name: "AgreementCanConfirm", type: "bool", value: AgreementCanConfirm, nullable: true}, {name: "AgreementCanView", type: "bool", value: AgreementCanView, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "Number", type: "string", value: Number, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MembershipAll = function(ID_Login, ID_Unit, ID_Person, ID_MembershipType, ID_MembershipCategory, LastName, IdentificationCode, IsValid, OnlyDirectMember, IsSts, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipAll", "MembershipAll", "membershipAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}, {name: "OnlyDirectMember", type: "bool", value: OnlyDirectMember, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MembershipCategoryAll = function(ID_Login, ID, DisplayName, ID_Sex, Age, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipCategoryAll", "MembershipCategoryAll", "membershipCategoryAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}, {name: "Age", type: "int", value: Age, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MembershipDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipDetail", "MembershipDetail", "membershipDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"ID_MembershipType","paramType":"s:string"},{"paramName":"ID_MembershipCategory","paramType":"s:string"},{"paramName":"ID_MembershipReason","paramType":"s:string"},{"paramName":"CreateNew","paramType":"s:boolean"},{"paramName":"OnlyValidate","paramType":"s:boolean"},{"paramName":"IsFunction","paramType":"s:boolean"},{"paramName":"IsSts","paramType":"s:boolean"},{"paramName":"IsUnique","paramType":"s:boolean"},{"paramName":"IsUnitFunction","paramType":"s:boolean"},{"paramName":"IsDelegate","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.MembershipInsert = function(ID_Login, ID, ID_Unit, ID_Person, Person, ValidFrom, ValidTo, ID_MembershipType, ID_MembershipCategory, ID_MembershipReason, CreateNew, OnlyValidate, IsFunction, IsSts, IsUnique, IsUnitFunction, IsDelegate, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipInsert", "MembershipInsert", "membership", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "ID_MembershipReason", type: "string", value: ID_MembershipReason, nullable: true}, {name: "CreateNew", type: "bool", value: CreateNew, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "IsFunction", type: "bool", value: IsFunction, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}, {name: "IsUnique", type: "bool", value: IsUnique, nullable: true}, {name: "IsUnitFunction", type: "bool", value: IsUnitFunction, nullable: true}, {name: "IsDelegate", type: "bool", value: IsDelegate, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.MembershipReasonAll = function(ID_Login, ID, DisplayName, IsMulti, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipReasonAll", "MembershipReasonAll", "membershipReasonAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "IsMulti", type: "bool", value: IsMulti, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MembershipTypeAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipTypeAll", "MembershipTypeAll", "membershipTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MembershipUpdate = function(ID_Login, ID, ID_Unit, ID_Person, Person, ValidFrom, ValidTo, ID_MembershipType, ID_MembershipCategory, ID_MembershipReason, CreateNew, OnlyValidate, IsFunction, IsSts, IsUnique, IsUnitFunction, IsDelegate, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipUpdate", "MembershipUpdate", "membership", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ID_MembershipCategory", type: "string", value: ID_MembershipCategory, nullable: true}, {name: "ID_MembershipReason", type: "string", value: ID_MembershipReason, nullable: true}, {name: "CreateNew", type: "bool", value: CreateNew, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "IsFunction", type: "bool", value: IsFunction, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}, {name: "IsUnique", type: "bool", value: IsUnique, nullable: true}, {name: "IsUnitFunction", type: "bool", value: IsUnitFunction, nullable: true}, {name: "IsDelegate", type: "bool", value: IsDelegate, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationAll = function(ID_Login, ID_Application, ID_Unit, IncludeChildUnits, ID_Realty, Publish, ID_RealtyType, Distance, GpsLatitude, GpsLongitude, GpsLatitudeStart, GpsLongitudeStart, GpsLatitudeEnd, GpsLongitudeEnd, AdvertisingCategories, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationAll", "OccupationAll", "occupationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "IncludeChildUnits", type: "bool", value: IncludeChildUnits, nullable: true}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "Distance", type: "int", value: Distance, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "GpsLatitudeStart", type: "string", value: GpsLatitudeStart, nullable: false}, {name: "GpsLongitudeStart", type: "string", value: GpsLongitudeStart, nullable: false}, {name: "GpsLatitudeEnd", type: "string", value: GpsLatitudeEnd, nullable: false}, {name: "GpsLongitudeEnd", type: "string", value: GpsLongitudeEnd, nullable: false}, {name: "AdvertisingCategories", type: "string", value: AdvertisingCategories, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationDelete", "OccupationDelete", "occupationDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.OccupationDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationDetail", "OccupationDetail", "occupationDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"ID_Realty","paramType":"s:int"},{"paramName":"Publish","paramType":"s:boolean"},{"paramName":"Note","paramType":"s:string"},{"paramName":"ID_RealtyType","paramType":"s:int"},{"paramName":"RealtyType","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.OccupationInsert = function(ID_Login, ID, ID_Unit, ID_Realty, Publish, Note, ID_RealtyType, RealtyType, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationInsert", "OccupationInsert", "occupation", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationUpdate = function(ID_Login, ID, ID_Unit, ID_Realty, Publish, Note, ID_RealtyType, RealtyType, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationUpdate", "OccupationUpdate", "occupation", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.OfferAll = function(ID_Login, ID_Person, ID_OfferType, IsActive, callback) {
  this.soapRequest("https://is.skaut.cz/OfferAll", "OfferAll", "offerAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID_OfferType", type: "int", value: ID_OfferType, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OfferDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OfferDelete", "OfferDelete", "offerDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.OfferInsert = function(ID_Login, ID_Person, ID, ID_OfferType, Note, callback) {
  this.soapRequest("https://is.skaut.cz/OfferInsert", "OfferInsert", "offer", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_OfferType", type: "int", value: ID_OfferType, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OfferTypeAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/OfferTypeAll", "OfferTypeAll", "offerTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OfferUpdate = function(ID_Login, ID_Person, ID, ID_OfferType, Note, callback) {
  this.soapRequest("https://is.skaut.cz/OfferUpdate", "OfferUpdate", "offer", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_OfferType", type: "int", value: ID_OfferType, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonAll = function(ID_Login, ID, DisplayName, ID_Sex, IdentificationCode, FirstName, LastName, SecurityCode, ID_Unit, OnlyDirectMember, IdentificationCodeStartsWith, ID_FunctionType, ID_QualificationType, RegistrationNumber, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAll", "PersonAll", "personAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "SecurityCode", type: "string", value: SecurityCode, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "OnlyDirectMember", type: "bool", value: OnlyDirectMember, nullable: true}, {name: "IdentificationCodeStartsWith", type: "string", value: IdentificationCodeStartsWith, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonContactAll = function(ID_Login, ID_Person, ID_ContactType, IsCatalog, IsMain, callback) {
  this.soapRequest("https://is.skaut.cz/PersonContactAll", "PersonContactAll", "personContactAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID_ContactType", type: "string", value: ID_ContactType, nullable: true}, {name: "IsCatalog", type: "bool", value: IsCatalog, nullable: true}, {name: "IsMain", type: "bool", value: IsMain, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonContactDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonContactDelete", "PersonContactDelete", "personContactDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.PersonContactInsert = function(ID_Login, ID_Person, ID, ID_ContactType, Value, IsSts, IsGa, IsCatalog, Note, callback) {
  this.soapRequest("https://is.skaut.cz/PersonContactInsert", "PersonContactInsert", "personContact", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_ContactType", type: "string", value: ID_ContactType, nullable: true}, {name: "Value", type: "string", value: Value, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}, {name: "IsGa", type: "bool", value: IsGa, nullable: true}, {name: "IsCatalog", type: "bool", value: IsCatalog, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.PersonContactUpdate = function(ID_Login, ID_Person, ID, ID_ContactType, Value, IsSts, IsGa, IsCatalog, Note, callback) {
  this.soapRequest("https://is.skaut.cz/PersonContactUpdate", "PersonContactUpdate", "personContact", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_ContactType", type: "string", value: ID_ContactType, nullable: true}, {name: "Value", type: "string", value: Value, nullable: true}, {name: "IsSts", type: "bool", value: IsSts, nullable: true}, {name: "IsGa", type: "bool", value: IsGa, nullable: true}, {name: "IsCatalog", type: "bool", value: IsCatalog, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonInsert = function(ID_Login, ID, DisplayName, DegreeInFrontOf, DegreeBehind, SecurityCode, IdentificationCode, IdentificationCodeHasPermission, FirstName, LastName, NickName, Street, City, Postcode, State, PostalFirstLine, PostalStreet, PostalCity, PostalPostcode, PostalState, Note, ID_Sex, Sex, Birthday, BirthdayYear, IsForeign, YearFrom, RegistrationNumber, ID_User, GenerateSecurityCode, OnlyValidate, PhotoExtension, PhotoContent, MaidenName, ID_PersonType, PersonType, Email, School, DisplayAdress, DisplayBirthday, DisplayEducation, DisplayEducationSeminary, DisplayFunction, DisplayMembership, DisplayOffer, DisplayPostalAdress, DisplaySchool, DisplayQualification, DisplayYearFrom, CatalogDisplay, CatalogContactCount, ID_PersonContactGa, PersonContactGa, ID_MemberCard, PhotoX, PhotoY, PhotoSize, IsPostalAuthenticated, IsAddressAuthenticated, AddressDistrict, PostalDistrict, UnitEnrollExtension, UnitEnroll, RejectDataStorage, HasMembership, IsLegacyMemberRead, callback) {
  this.soapRequest("https://is.skaut.cz/PersonInsert", "PersonInsert", "person", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "DegreeInFrontOf", type: "string", value: DegreeInFrontOf, nullable: true}, {name: "DegreeBehind", type: "string", value: DegreeBehind, nullable: true}, {name: "SecurityCode", type: "string", value: SecurityCode, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "IdentificationCodeHasPermission", type: "bool", value: IdentificationCodeHasPermission, nullable: true}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "NickName", type: "string", value: NickName, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "PostalFirstLine", type: "string", value: PostalFirstLine, nullable: true}, {name: "PostalStreet", type: "string", value: PostalStreet, nullable: true}, {name: "PostalCity", type: "string", value: PostalCity, nullable: true}, {name: "PostalPostcode", type: "string", value: PostalPostcode, nullable: true}, {name: "PostalState", type: "string", value: PostalState, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}, {name: "Sex", type: "string", value: Sex, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "BirthdayYear", type: "int", value: BirthdayYear, nullable: true}, {name: "IsForeign", type: "bool", value: IsForeign, nullable: true}, {name: "YearFrom", type: "int", value: YearFrom, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "GenerateSecurityCode", type: "bool", value: GenerateSecurityCode, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoContent", type: "string", value: PhotoContent, nullable: true}, {name: "MaidenName", type: "string", value: MaidenName, nullable: true}, {name: "ID_PersonType", type: "string", value: ID_PersonType, nullable: true}, {name: "PersonType", type: "string", value: PersonType, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "School", type: "string", value: School, nullable: true}, {name: "DisplayAdress", type: "bool", value: DisplayAdress, nullable: true}, {name: "DisplayBirthday", type: "bool", value: DisplayBirthday, nullable: true}, {name: "DisplayEducation", type: "bool", value: DisplayEducation, nullable: true}, {name: "DisplayEducationSeminary", type: "bool", value: DisplayEducationSeminary, nullable: true}, {name: "DisplayFunction", type: "bool", value: DisplayFunction, nullable: true}, {name: "DisplayMembership", type: "bool", value: DisplayMembership, nullable: true}, {name: "DisplayOffer", type: "bool", value: DisplayOffer, nullable: true}, {name: "DisplayPostalAdress", type: "bool", value: DisplayPostalAdress, nullable: true}, {name: "DisplaySchool", type: "bool", value: DisplaySchool, nullable: true}, {name: "DisplayQualification", type: "bool", value: DisplayQualification, nullable: true}, {name: "DisplayYearFrom", type: "bool", value: DisplayYearFrom, nullable: true}, {name: "CatalogDisplay", type: "bool", value: CatalogDisplay, nullable: true}, {name: "CatalogContactCount", type: "int", value: CatalogContactCount, nullable: true}, {name: "ID_PersonContactGa", type: "int", value: ID_PersonContactGa, nullable: true}, {name: "PersonContactGa", type: "string", value: PersonContactGa, nullable: true}, {name: "ID_MemberCard", type: "int", value: ID_MemberCard, nullable: true}, {name: "PhotoX", type: "int", value: PhotoX, nullable: true}, {name: "PhotoY", type: "int", value: PhotoY, nullable: true}, {name: "PhotoSize", type: "int", value: PhotoSize, nullable: true}, {name: "IsPostalAuthenticated", type: "bool", value: IsPostalAuthenticated, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "AddressDistrict", type: "string", value: AddressDistrict, nullable: true}, {name: "PostalDistrict", type: "string", value: PostalDistrict, nullable: true}, {name: "UnitEnrollExtension", type: "string", value: UnitEnrollExtension, nullable: true}, {name: "UnitEnroll", type: "string", value: UnitEnroll, nullable: true}, {name: "RejectDataStorage", type: "bool", value: RejectDataStorage, nullable: true}, {name: "HasMembership", type: "bool", value: HasMembership, nullable: true}, {name: "IsLegacyMemberRead", type: "bool", value: IsLegacyMemberRead, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.PersonUpdate = function(ID_Login, ID, DisplayName, DegreeInFrontOf, DegreeBehind, SecurityCode, IdentificationCode, IdentificationCodeHasPermission, FirstName, LastName, NickName, Street, City, Postcode, State, PostalFirstLine, PostalStreet, PostalCity, PostalPostcode, PostalState, Note, ID_Sex, Sex, Birthday, BirthdayYear, IsForeign, YearFrom, RegistrationNumber, ID_User, GenerateSecurityCode, OnlyValidate, PhotoExtension, PhotoContent, MaidenName, ID_PersonType, PersonType, Email, School, DisplayAdress, DisplayBirthday, DisplayEducation, DisplayEducationSeminary, DisplayFunction, DisplayMembership, DisplayOffer, DisplayPostalAdress, DisplaySchool, DisplayQualification, DisplayYearFrom, CatalogDisplay, CatalogContactCount, ID_PersonContactGa, PersonContactGa, ID_MemberCard, PhotoX, PhotoY, PhotoSize, IsPostalAuthenticated, IsAddressAuthenticated, AddressDistrict, PostalDistrict, UnitEnrollExtension, UnitEnroll, RejectDataStorage, HasMembership, IsLegacyMemberRead, callback) {
  this.soapRequest("https://is.skaut.cz/PersonUpdate", "PersonUpdate", "person", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "DegreeInFrontOf", type: "string", value: DegreeInFrontOf, nullable: true}, {name: "DegreeBehind", type: "string", value: DegreeBehind, nullable: true}, {name: "SecurityCode", type: "string", value: SecurityCode, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "IdentificationCodeHasPermission", type: "bool", value: IdentificationCodeHasPermission, nullable: true}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "NickName", type: "string", value: NickName, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "PostalFirstLine", type: "string", value: PostalFirstLine, nullable: true}, {name: "PostalStreet", type: "string", value: PostalStreet, nullable: true}, {name: "PostalCity", type: "string", value: PostalCity, nullable: true}, {name: "PostalPostcode", type: "string", value: PostalPostcode, nullable: true}, {name: "PostalState", type: "string", value: PostalState, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}, {name: "Sex", type: "string", value: Sex, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "BirthdayYear", type: "int", value: BirthdayYear, nullable: true}, {name: "IsForeign", type: "bool", value: IsForeign, nullable: true}, {name: "YearFrom", type: "int", value: YearFrom, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "GenerateSecurityCode", type: "bool", value: GenerateSecurityCode, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoContent", type: "string", value: PhotoContent, nullable: true}, {name: "MaidenName", type: "string", value: MaidenName, nullable: true}, {name: "ID_PersonType", type: "string", value: ID_PersonType, nullable: true}, {name: "PersonType", type: "string", value: PersonType, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "School", type: "string", value: School, nullable: true}, {name: "DisplayAdress", type: "bool", value: DisplayAdress, nullable: true}, {name: "DisplayBirthday", type: "bool", value: DisplayBirthday, nullable: true}, {name: "DisplayEducation", type: "bool", value: DisplayEducation, nullable: true}, {name: "DisplayEducationSeminary", type: "bool", value: DisplayEducationSeminary, nullable: true}, {name: "DisplayFunction", type: "bool", value: DisplayFunction, nullable: true}, {name: "DisplayMembership", type: "bool", value: DisplayMembership, nullable: true}, {name: "DisplayOffer", type: "bool", value: DisplayOffer, nullable: true}, {name: "DisplayPostalAdress", type: "bool", value: DisplayPostalAdress, nullable: true}, {name: "DisplaySchool", type: "bool", value: DisplaySchool, nullable: true}, {name: "DisplayQualification", type: "bool", value: DisplayQualification, nullable: true}, {name: "DisplayYearFrom", type: "bool", value: DisplayYearFrom, nullable: true}, {name: "CatalogDisplay", type: "bool", value: CatalogDisplay, nullable: true}, {name: "CatalogContactCount", type: "int", value: CatalogContactCount, nullable: true}, {name: "ID_PersonContactGa", type: "int", value: ID_PersonContactGa, nullable: true}, {name: "PersonContactGa", type: "string", value: PersonContactGa, nullable: true}, {name: "ID_MemberCard", type: "int", value: ID_MemberCard, nullable: true}, {name: "PhotoX", type: "int", value: PhotoX, nullable: true}, {name: "PhotoY", type: "int", value: PhotoY, nullable: true}, {name: "PhotoSize", type: "int", value: PhotoSize, nullable: true}, {name: "IsPostalAuthenticated", type: "bool", value: IsPostalAuthenticated, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "AddressDistrict", type: "string", value: AddressDistrict, nullable: true}, {name: "PostalDistrict", type: "string", value: PostalDistrict, nullable: true}, {name: "UnitEnrollExtension", type: "string", value: UnitEnrollExtension, nullable: true}, {name: "UnitEnroll", type: "string", value: UnitEnroll, nullable: true}, {name: "RejectDataStorage", type: "bool", value: RejectDataStorage, nullable: true}, {name: "HasMembership", type: "bool", value: HasMembership, nullable: true}, {name: "IsLegacyMemberRead", type: "bool", value: IsLegacyMemberRead, nullable: true}], [{"paramName":"PhotoResized","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.QualificationAll = function(ID_Login, ID_Person, ID_QualificationType, IsValid, QualificationTypeKey, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationAll", "QualificationAll", "qualificationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: false}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}, {name: "QualificationTypeKey", type: "string", value: QualificationTypeKey, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.QualificationDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationDetail", "QualificationDetail", "qualificationDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"ID_QualificationType","paramType":"s:int"},{"paramName":"QualificationType","paramType":"s:string"},{"paramName":"LetterNumber","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"IsUsed","paramType":"s:boolean"},{"paramName":"SendMessage","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.QualificationInsert = function(ID_Login, ID_Person, Person, ID, ValidFrom, ValidTo, ID_QualificationType, QualificationType, LetterNumber, Note, IsUsed, SendMessage, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationInsert", "QualificationInsert", "qualification", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "QualificationType", type: "string", value: QualificationType, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsUsed", type: "bool", value: IsUsed, nullable: true}, {name: "SendMessage", type: "bool", value: SendMessage, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.QualificationTypeAll = function(ID_Login, DisplayName, IsExam, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationTypeAll", "QualificationTypeAll", "qualificationTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "IsExam", type: "bool", value: IsExam, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.QualificationUpdate = function(ID_Login, ID_Person, Person, ID, ValidFrom, ValidTo, ID_QualificationType, QualificationType, LetterNumber, Note, IsUsed, SendMessage, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationUpdate", "QualificationUpdate", "qualification", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "QualificationType", type: "string", value: QualificationType, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsUsed", type: "bool", value: IsUsed, nullable: true}, {name: "SendMessage", type: "bool", value: SendMessage, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RealtyAll = function(ID_Login, ID, ID_RealtyType, SearchByCity, SearchByName, SearchString, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyAll", "RealtyAll", "realtyAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "SearchByCity", type: "bool", value: SearchByCity, nullable: true}, {name: "SearchByName", type: "bool", value: SearchByName, nullable: true}, {name: "SearchString", type: "string", value: SearchString, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDetail", "RealtyDetail", "realtyDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_RealtyType","paramType":"s:int"},{"paramName":"RealtyType","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"GpsLatitude","paramType":"s:double"},{"paramName":"GpsLongitude","paramType":"s:double"},{"paramName":"Description","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"ID_RealtyCollection","paramType":"s:int"},{"paramName":"RealtyCollection","paramType":"s:string"},{"paramName":"ID_OwnerType","paramType":"s:string"},{"paramName":"OwnerType","paramType":"s:string"},{"paramName":"OwnerTypeNote","paramType":"s:string"},{"paramName":"IsPower","paramType":"s:boolean"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"IsActive","paramType":"s:boolean"},{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoFileContent","paramType":"s:base64Binary"},{"paramName":"ID_TempFilePhoto","paramType":"s1:guid"},{"paramName":"FotogalleryUrl","paramType":"s:string"},{"paramName":"IsAddressAuthenticated","paramType":"s:boolean"},{"paramName":"District","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.RealtyInsert = function(ID_Login, ID, DisplayName, ID_RealtyType, RealtyType, Street, City, Postcode, GpsLatitude, GpsLongitude, Description, Note, ID_RealtyCollection, RealtyCollection, ID_OwnerType, OwnerType, OwnerTypeNote, IsPower, ValidTo, IsActive, PhotoExtension, PhotoFileContent, ID_TempFilePhoto, FotogalleryUrl, IsAddressAuthenticated, District, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyInsert", "RealtyInsert", "realty", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_OwnerType", type: "string", value: ID_OwnerType, nullable: true}, {name: "OwnerType", type: "string", value: OwnerType, nullable: true}, {name: "OwnerTypeNote", type: "string", value: OwnerTypeNote, nullable: true}, {name: "IsPower", type: "bool", value: IsPower, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoFileContent", type: "string", value: PhotoFileContent, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "District", type: "string", value: District, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RealtyTypeAll = function(DisplayName, ID_Login, ID_Application, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyTypeAll", "RealtyTypeAll", "realtyTypeAllInput", [{name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyUpdate = function(ID_Login, ID, DisplayName, ID_RealtyType, RealtyType, Street, City, Postcode, GpsLatitude, GpsLongitude, Description, Note, ID_RealtyCollection, RealtyCollection, ID_OwnerType, OwnerType, OwnerTypeNote, IsPower, ValidTo, IsActive, PhotoExtension, PhotoFileContent, ID_TempFilePhoto, FotogalleryUrl, IsAddressAuthenticated, District, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyUpdate", "RealtyUpdate", "realty", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_OwnerType", type: "string", value: ID_OwnerType, nullable: true}, {name: "OwnerType", type: "string", value: OwnerType, nullable: true}, {name: "OwnerTypeNote", type: "string", value: OwnerTypeNote, nullable: true}, {name: "IsPower", type: "bool", value: IsPower, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoFileContent", type: "string", value: PhotoFileContent, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "District", type: "string", value: District, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegistrationCategoryAll = function(ID_Login, ID_UnitRegistration, ID_RegistrationCategoryParent, DisplayName, ID_MembershipType, ShowParentUnit, ShowUsable, IsAfterDeadline, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrationCategoryAll", "RegistrationCategoryAll", "registrationCategoryAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistration", type: "int", value: ID_UnitRegistration, nullable: false}, {name: "ID_RegistrationCategoryParent", type: "int", value: ID_RegistrationCategoryParent, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_MembershipType", type: "string", value: ID_MembershipType, nullable: true}, {name: "ShowParentUnit", type: "bool", value: ShowParentUnit, nullable: true}, {name: "ShowUsable", type: "bool", value: ShowUsable, nullable: true}, {name: "IsAfterDeadline", type: "bool", value: IsAfterDeadline, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionTransportAll = function(ID_Login, ID_RealtyCollection, ID, ID_RealtyTransport, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionTransportAll", "RealtyCollectionTransportAll", "realtyCollectionTransportAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_RealtyTransport", type: "string", value: ID_RealtyTransport, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionTransportDeleteRealtyCollection = function(ID_Login, ID_RealtyCollection, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionTransportDeleteRealtyCollection", "RealtyCollectionTransportDeleteRealtyCollection", "realtyCollectionTransportDeleteRealtyCollectionInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionTransportInsert = function(ID_Login, ID, ID_RealtyCollection, RealtyCollection, ID_RealtyTransport, RealtyTransport, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionTransportInsert", "RealtyCollectionTransportInsert", "realtyCollectionTransport", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_RealtyTransport", type: "string", value: ID_RealtyTransport, nullable: true}, {name: "RealtyTransport", type: "string", value: RealtyTransport, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionUpdate = function(PhotoExtension, PhotoFileContent, ID_TempFilePhoto, FotogalleryUrl, ID_Login, ID, ID_Unit, Unit, UnitRegistrationNumber, Owner, ID_User, IsActive, DisplayName, Description, Web, GpsLatitude, GpsLongitude, HasAddress, Street, City, Postcode, District, TransportationMethods, TransportationMethodsText, TransportDescription, Locations, LocationsText, PointsOfInterest, Note, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionUpdate", "RealtyCollectionUpdate", "realtyCollection", [{name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoFileContent", type: "string", value: PhotoFileContent, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "UnitRegistrationNumber", type: "string", value: UnitRegistrationNumber, nullable: true}, {name: "Owner", type: "string", value: Owner, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Web", type: "string", value: Web, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "HasAddress", type: "bool", value: HasAddress, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "District", type: "string", value: District, nullable: true}, {name: "TransportationMethods", type: "string", value: TransportationMethods, nullable: true}, {name: "TransportationMethodsText", type: "string", value: TransportationMethodsText, nullable: true}, {name: "TransportDescription", type: "string", value: TransportDescription, nullable: true}, {name: "Locations", type: "string", value: Locations, nullable: true}, {name: "LocationsText", type: "string", value: LocationsText, nullable: true}, {name: "PointsOfInterest", type: "string", value: PointsOfInterest, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RealtyDelete = function(ID_Login, ID, Note, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDelete", "RealtyDelete", "realtyDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"Deleted","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.RealtyDocumentAllOccupation = function(ID_Login, ID, ID_User, Location, ID_Occupation, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDocumentAllOccupation", "RealtyDocumentAllOccupation", "realtyDocumentAllOccupationInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyDocumentAllRealty = function(ID_Login, ID_Realty, ID, ID_User, Location, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDocumentAllRealty", "RealtyDocumentAllRealty", "realtyDocumentAllRealtyInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyDocumentInsert = function(ID_Login, ID, DisplayName, ID_User, Location, Origin, Saved, IsPublic, DownloadName, Note, Size, Hash, ID_Realty, Realty, ID_Occupation, Extension, ID_TempFileDocument, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDocumentInsert", "RealtyDocumentInsert", "realtyDocument", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "Origin", type: "string", value: Origin, nullable: true}, {name: "Saved", type: "string", value: Saved, nullable: true}, {name: "IsPublic", type: "bool", value: IsPublic, nullable: true}, {name: "DownloadName", type: "string", value: DownloadName, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "Size", type: "int", value: Size, nullable: true}, {name: "Hash", type: "string", value: Hash, nullable: true}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Realty", type: "string", value: Realty, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "Extension", type: "string", value: Extension, nullable: true}, {name: "ID_TempFileDocument", type: "string", value: ID_TempFileDocument, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RealtyDocumentUpdateBinding = function(ID_Login, ID, DisplayName, ID_User, Location, Origin, Saved, IsPublic, DownloadName, Note, Size, Hash, ID_Realty, Realty, ID_Occupation, Extension, ID_TempFileDocument, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDocumentUpdateBinding", "RealtyDocumentUpdateBinding", "realtyDocument", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "Origin", type: "string", value: Origin, nullable: true}, {name: "Saved", type: "string", value: Saved, nullable: true}, {name: "IsPublic", type: "bool", value: IsPublic, nullable: true}, {name: "DownloadName", type: "string", value: DownloadName, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "Size", type: "int", value: Size, nullable: true}, {name: "Hash", type: "string", value: Hash, nullable: true}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Realty", type: "string", value: Realty, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "Extension", type: "string", value: Extension, nullable: true}, {name: "ID_TempFileDocument", type: "string", value: ID_TempFileDocument, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RealtyInsertRealtyCollection = function(ID_Login, DisplayName, ID_RealtyCollection, ID_OwnerType, OwnerTypeNote, IsPower, Description, Note, ID_RegisterType, RegisterCode, ID_TempFilePhoto, FotogalleryUrl, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyInsertRealtyCollection", "RealtyInsertRealtyCollection", "realtyInsertRealtyCollectionInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "ID_OwnerType", type: "string", value: ID_OwnerType, nullable: true}, {name: "OwnerTypeNote", type: "string", value: OwnerTypeNote, nullable: true}, {name: "IsPower", type: "bool", value: IsPower, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RegisterType", type: "string", value: ID_RegisterType, nullable: true}, {name: "RegisterCode", type: "string", value: RegisterCode, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RealtyLocationAll = function(ID_Login, ID_Application, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyLocationAll", "RealtyLocationAll", "realtyLocationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyRegisterTypeAll = function(ID_Login, ID_Realty, ID, ID_RegisterType, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyRegisterTypeAll", "RealtyRegisterTypeAll", "realtyRegisterTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_RegisterType", type: "string", value: ID_RegisterType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyRegisterTypeDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyRegisterTypeDelete", "RealtyRegisterTypeDelete", "realtyRegisterTypeDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.RealtyRegisterTypeDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyRegisterTypeDetail", "RealtyRegisterTypeDetail", "realtyRegisterTypeDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_RegisterType","paramType":"s:string"},{"paramName":"RegisterType","paramType":"s:string"},{"paramName":"Code","paramType":"s:string"},{"paramName":"ID_Realty","paramType":"s:int"},{"paramName":"Realty","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.RealtyRegisterTypeInsert = function(ID_Login, ID, ID_RegisterType, RegisterType, Code, ID_Realty, Realty, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyRegisterTypeInsert", "RealtyRegisterTypeInsert", "realtyRegisterType", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_RegisterType", type: "string", value: ID_RegisterType, nullable: true}, {name: "RegisterType", type: "string", value: RegisterType, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Realty", type: "string", value: Realty, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RealtyTransportAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyTransportAll", "RealtyTransportAll", "realtyTransportAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyTypeDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyTypeDetail", "RealtyTypeDetail", "realtyTypeDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"IsActive","paramType":"s:boolean"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"Key","paramType":"s:string"},{"paramName":"IsBorrowable","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.RealtyUpdateIsPower = function(ID_Login, ID, DisplayName, ID_RealtyType, RealtyType, Street, City, Postcode, GpsLatitude, GpsLongitude, Description, Note, ID_RealtyCollection, RealtyCollection, ID_OwnerType, OwnerType, OwnerTypeNote, IsPower, ValidTo, IsActive, PhotoExtension, PhotoFileContent, ID_TempFilePhoto, FotogalleryUrl, IsAddressAuthenticated, District, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyUpdateIsPower", "RealtyUpdateIsPower", "realty", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_OwnerType", type: "string", value: ID_OwnerType, nullable: true}, {name: "OwnerType", type: "string", value: OwnerType, nullable: true}, {name: "OwnerTypeNote", type: "string", value: OwnerTypeNote, nullable: true}, {name: "IsPower", type: "bool", value: IsPower, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoFileContent", type: "string", value: PhotoFileContent, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "District", type: "string", value: District, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RealtyUpdateRemoveFromCollection = function(ID_Login, ID, DisplayName, ID_RealtyType, RealtyType, Street, City, Postcode, GpsLatitude, GpsLongitude, Description, Note, ID_RealtyCollection, RealtyCollection, ID_OwnerType, OwnerType, OwnerTypeNote, IsPower, ValidTo, IsActive, PhotoExtension, PhotoFileContent, ID_TempFilePhoto, FotogalleryUrl, IsAddressAuthenticated, District, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyUpdateRemoveFromCollection", "RealtyUpdateRemoveFromCollection", "realty", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_OwnerType", type: "string", value: ID_OwnerType, nullable: true}, {name: "OwnerType", type: "string", value: OwnerType, nullable: true}, {name: "OwnerTypeNote", type: "string", value: OwnerTypeNote, nullable: true}, {name: "IsPower", type: "bool", value: IsPower, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoFileContent", type: "string", value: PhotoFileContent, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "District", type: "string", value: District, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegisterTypeAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/RegisterTypeAll", "RegisterTypeAll", "registerTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitRegistrationRebuildMembers = function(ID_Login, ID, Year, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationRebuildMembers", "UnitRegistrationRebuildMembers", "unitRegistrationRebuildMembersInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitRegistrationReportChild = function(ID_Login, ID, UnitType, RegistrationNumber, ShowChildUnit, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationReportChild", "UnitRegistrationReportChild", "UnitRegistrationReportChildInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "UnitType", type: "string", value: UnitType, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ShowChildUnit", type: "bool", value: ShowChildUnit, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitRegistrationAllYearUstredi = function(ID_Login, ExportFilter, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationAllYearUstredi", "UnitRegistrationAllYearUstredi", "unitRegistrationAllYearUstrediInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ExportFilter", type: "bool", value: ExportFilter, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.StampTypeAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/StampTypeAll", "StampTypeAll", "stampTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitStampAll = function(ID_Login, ID_Unit, ID, ID_StampType, callback) {
  this.soapRequest("https://is.skaut.cz/UnitStampAll", "UnitStampAll", "unitStampAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_StampType", type: "string", value: ID_StampType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitStampDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitStampDelete", "UnitStampDelete", "unitStampDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.UnitStampDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitStampDetail", "UnitStampDetail", "unitStampDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"ID_StampType","paramType":"s:string"},{"paramName":"StampType","paramType":"s:string"},{"paramName":"Count","paramType":"s:int"},{"paramName":"Email","paramType":"s:string"},{"paramName":"Web","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.UnitStampInsert = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, ID_StampType, StampType, Count, Email, Web, callback) {
  this.soapRequest("https://is.skaut.cz/UnitStampInsert", "UnitStampInsert", "unitStamp", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_StampType", type: "string", value: ID_StampType, nullable: true}, {name: "StampType", type: "string", value: StampType, nullable: true}, {name: "Count", type: "int", value: Count, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "Web", type: "string", value: Web, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitStampUpdate = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, ID_StampType, StampType, Count, Email, Web, callback) {
  this.soapRequest("https://is.skaut.cz/UnitStampUpdate", "UnitStampUpdate", "unitStamp", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_StampType", type: "string", value: ID_StampType, nullable: true}, {name: "StampType", type: "string", value: StampType, nullable: true}, {name: "Count", type: "int", value: Count, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "Web", type: "string", value: Web, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitUpdateChangeJournalNovice = function(ID_Login, ID, ID_JournalNovice, callback) {
  this.soapRequest("https://is.skaut.cz/UnitUpdateChangeJournalNovice", "UnitUpdateChangeJournalNovice", "unitUpdateChangeJournalNoviceInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_JournalNovice", type: "string", value: ID_JournalNovice, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitUpdateName = function(ID_Login, ID, OnlyValidate, IsPropertyOwner, ID_JournalNovice, FullDisplayName, ID_Group, ID_Unit, ID_UnitType, UnitType, ContainsMembers, CommissionDeadline, DisplayName, SortName, RegistrationNumber, ShortRegistrationNumber, Location, IC, IsVatPayer, DIC, FileReference, Street, City, Postcode, State, PostalFirstLine, PostalStreet, PostalCity, PostalPostcode, PostalState, Note, ID_TroopArt, TroopArt, CanUpdateRegistrationNumber, LogoContent, LogoExtension, IsUnitCancel, JournalParent, ChangeFreeJournal, ID_UnitParent, IsPostalAuthenticated, IsAddressAuthenticated, AddressDistrict, PostalDistrict, NewDisplayName, CompleteDisplayName, ID_PersonChangeName, PersonChangeName, DateChangeName, PropertyAgreementExtension, ID_TempFilePropertyAgreement, PropertyAgreementContent, callback) {
  this.soapRequest("https://is.skaut.cz/UnitUpdateName", "UnitUpdateName", "unit", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "ID_JournalNovice", type: "string", value: ID_JournalNovice, nullable: true}, {name: "FullDisplayName", type: "string", value: FullDisplayName, nullable: true}, {name: "ID_Group", type: "int", value: ID_Group, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "UnitType", type: "string", value: UnitType, nullable: true}, {name: "ContainsMembers", type: "bool", value: ContainsMembers, nullable: true}, {name: "CommissionDeadline", type: "int", value: CommissionDeadline, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "SortName", type: "string", value: SortName, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ShortRegistrationNumber", type: "string", value: ShortRegistrationNumber, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "IsVatPayer", type: "bool", value: IsVatPayer, nullable: true}, {name: "DIC", type: "string", value: DIC, nullable: true}, {name: "FileReference", type: "string", value: FileReference, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "PostalFirstLine", type: "string", value: PostalFirstLine, nullable: true}, {name: "PostalStreet", type: "string", value: PostalStreet, nullable: true}, {name: "PostalCity", type: "string", value: PostalCity, nullable: true}, {name: "PostalPostcode", type: "string", value: PostalPostcode, nullable: true}, {name: "PostalState", type: "string", value: PostalState, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_TroopArt", type: "int", value: ID_TroopArt, nullable: true}, {name: "TroopArt", type: "string", value: TroopArt, nullable: true}, {name: "CanUpdateRegistrationNumber", type: "bool", value: CanUpdateRegistrationNumber, nullable: true}, {name: "LogoContent", type: "string", value: LogoContent, nullable: true}, {name: "LogoExtension", type: "string", value: LogoExtension, nullable: true}, {name: "IsUnitCancel", type: "bool", value: IsUnitCancel, nullable: true}, {name: "JournalParent", type: "bool", value: JournalParent, nullable: true}, {name: "ChangeFreeJournal", type: "bool", value: ChangeFreeJournal, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: true}, {name: "IsPostalAuthenticated", type: "bool", value: IsPostalAuthenticated, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "AddressDistrict", type: "string", value: AddressDistrict, nullable: true}, {name: "PostalDistrict", type: "string", value: PostalDistrict, nullable: true}, {name: "NewDisplayName", type: "string", value: NewDisplayName, nullable: true}, {name: "CompleteDisplayName", type: "string", value: CompleteDisplayName, nullable: true}, {name: "ID_PersonChangeName", type: "int", value: ID_PersonChangeName, nullable: true}, {name: "PersonChangeName", type: "string", value: PersonChangeName, nullable: true}, {name: "DateChangeName", type: "string", value: DateChangeName, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "ID_TempFilePropertyAgreement", type: "string", value: ID_TempFilePropertyAgreement, nullable: true}, {name: "PropertyAgreementContent", type: "string", value: PropertyAgreementContent, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.AccountUpdateCancel = function(ID_Login, ID, DisplayName, ID_Unit, Unit, ValidTo, ID_Bank, Bank, AccountPrefix, AccountNumber, Street, City, Postcode, Note, IsMain, callback) {
  this.soapRequest("https://is.skaut.cz/AccountUpdateCancel", "AccountUpdateCancel", "account", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Bank", type: "int", value: ID_Bank, nullable: true}, {name: "Bank", type: "string", value: Bank, nullable: true}, {name: "AccountPrefix", type: "string", value: AccountPrefix, nullable: true}, {name: "AccountNumber", type: "string", value: AccountNumber, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsMain", type: "bool", value: IsMain, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.AgeCategoryAll = function(ID_Login, IsMore, callback) {
  this.soapRequest("https://is.skaut.cz/AgeCategoryAll", "AgeCategoryAll", "ageCategoryAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "IsMore", type: "bool", value: IsMore, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.AgencyAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/AgencyAll", "AgencyAll", "agencyAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardAll = function(ID_Login, ID_Person, ID, ID_MemberCardState, DisplayName, ID_MemberCardType, ID_PersonSchool, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardAll", "MemberCardAll", "memberCardAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_MemberCardState", type: "string", value: ID_MemberCardState, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_MemberCardType", type: "string", value: ID_MemberCardType, nullable: true}, {name: "ID_PersonSchool", type: "int", value: ID_PersonSchool, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardDelete", "MemberCardDelete", "memberCardDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardDetail = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardDetail", "MemberCardDetail", "memberCardDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_MemberCardState","paramType":"s:string"},{"paramName":"MemberCardState","paramType":"s:string"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"Birthday","paramType":"s:dateTime"},{"paramName":"ID_MemberCardType","paramType":"s:string"},{"paramName":"MemberCardType","paramType":"s:string"},{"paramName":"Year","paramType":"s:int"},{"paramName":"DateCreate","paramType":"s:dateTime"},{"paramName":"Price","paramType":"s:decimal"},{"paramName":"IsAuthorized","paramType":"s:boolean"},{"paramName":"IsPaid","paramType":"s:boolean"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"ID_PersonSchool","paramType":"s:int"},{"paramName":"PersonSchool","paramType":"s:string"},{"paramName":"PersonSchoolCity","paramType":"s:string"},{"paramName":"ID_PersonRegistration","paramType":"s:int"},{"paramName":"UnitStredisko","paramType":"s:string"},{"paramName":"LeaderContact","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.MemberCardInsert = function(ID_Login, ID, ID_MemberCardState, MemberCardState, DisplayName, ID_Person, Person, Birthday, ID_MemberCardType, MemberCardType, Year, DateCreate, Price, IsAuthorized, IsPaid, ValidFrom, ValidTo, ID_PersonSchool, PersonSchool, PersonSchoolCity, ID_PersonRegistration, UnitStredisko, LeaderContact, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInsert", "MemberCardInsert", "memberCard", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_MemberCardState", type: "string", value: ID_MemberCardState, nullable: true}, {name: "MemberCardState", type: "string", value: MemberCardState, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "ID_MemberCardType", type: "string", value: ID_MemberCardType, nullable: true}, {name: "MemberCardType", type: "string", value: MemberCardType, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "Price", type: "float", value: Price, nullable: true}, {name: "IsAuthorized", type: "bool", value: IsAuthorized, nullable: true}, {name: "IsPaid", type: "bool", value: IsPaid, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_PersonSchool", type: "int", value: ID_PersonSchool, nullable: true}, {name: "PersonSchool", type: "string", value: PersonSchool, nullable: true}, {name: "PersonSchoolCity", type: "string", value: PersonSchoolCity, nullable: true}, {name: "ID_PersonRegistration", type: "int", value: ID_PersonRegistration, nullable: true}, {name: "UnitStredisko", type: "string", value: UnitStredisko, nullable: true}, {name: "LeaderContact", type: "string", value: LeaderContact, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.MemberCardUpdate = function(ID_Login, ID, ID_MemberCardState, MemberCardState, DisplayName, ID_Person, Person, Birthday, ID_MemberCardType, MemberCardType, Year, DateCreate, Price, IsAuthorized, IsPaid, ValidFrom, ValidTo, ID_PersonSchool, PersonSchool, PersonSchoolCity, ID_PersonRegistration, UnitStredisko, LeaderContact, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardUpdate", "MemberCardUpdate", "memberCard", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_MemberCardState", type: "string", value: ID_MemberCardState, nullable: true}, {name: "MemberCardState", type: "string", value: MemberCardState, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "ID_MemberCardType", type: "string", value: ID_MemberCardType, nullable: true}, {name: "MemberCardType", type: "string", value: MemberCardType, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "Price", type: "float", value: Price, nullable: true}, {name: "IsAuthorized", type: "bool", value: IsAuthorized, nullable: true}, {name: "IsPaid", type: "bool", value: IsPaid, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_PersonSchool", type: "int", value: ID_PersonSchool, nullable: true}, {name: "PersonSchool", type: "string", value: PersonSchool, nullable: true}, {name: "PersonSchoolCity", type: "string", value: PersonSchoolCity, nullable: true}, {name: "ID_PersonRegistration", type: "int", value: ID_PersonRegistration, nullable: true}, {name: "UnitStredisko", type: "string", value: UnitStredisko, nullable: true}, {name: "LeaderContact", type: "string", value: LeaderContact, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardUpdateRerequest = function(ID_Login, ID, ID_MemberCardState, MemberCardState, DisplayName, ID_Person, Person, Birthday, ID_MemberCardType, MemberCardType, Year, DateCreate, Price, IsAuthorized, IsPaid, ValidFrom, ValidTo, ID_PersonSchool, PersonSchool, PersonSchoolCity, ID_PersonRegistration, UnitStredisko, LeaderContact, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardUpdateRerequest", "MemberCardUpdateRerequest", "memberCard", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_MemberCardState", type: "string", value: ID_MemberCardState, nullable: true}, {name: "MemberCardState", type: "string", value: MemberCardState, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "ID_MemberCardType", type: "string", value: ID_MemberCardType, nullable: true}, {name: "MemberCardType", type: "string", value: MemberCardType, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "Price", type: "float", value: Price, nullable: true}, {name: "IsAuthorized", type: "bool", value: IsAuthorized, nullable: true}, {name: "IsPaid", type: "bool", value: IsPaid, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_PersonSchool", type: "int", value: ID_PersonSchool, nullable: true}, {name: "PersonSchool", type: "string", value: PersonSchool, nullable: true}, {name: "PersonSchoolCity", type: "string", value: PersonSchoolCity, nullable: true}, {name: "ID_PersonRegistration", type: "int", value: ID_PersonRegistration, nullable: true}, {name: "UnitStredisko", type: "string", value: UnitStredisko, nullable: true}, {name: "LeaderContact", type: "string", value: LeaderContact, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonDetailMembership = function(ID_Login, ID_Application, IdentificationCode, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetailMembership", "PersonDetailMembership", "personDetailMembershipInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}], [{"paramName":"IsMember","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.PersonDetailMemberCard = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetailMemberCard", "PersonDetailMemberCard", "personDetailMemberCardInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"Birthday","paramType":"s:dateTime"},{"paramName":"ID_MemberCardType","paramType":"s:string"},{"paramName":"MemberCardType","paramType":"s:string"},{"paramName":"UnitStredisko","paramType":"s:string"},{"paramName":"LeaderContact","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.PersonDetailSchool = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetailSchool", "PersonDetailSchool", "personDetailSchoolInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Extension","paramType":"s:string"},{"paramName":"Scan","paramType":"s:base64Binary"},{"paramName":"DateCreate","paramType":"s:dateTime"},{"paramName":"IsValid","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.PersonSchoolDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonSchoolDelete", "PersonSchoolDelete", "personSchoolDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.PersonSchoolInsert = function(ID_Login, ID, ID_Person, DisplayName, City, Extension, Scan, DateCreate, PhotoExtension, Photo, callback) {
  this.soapRequest("https://is.skaut.cz/PersonSchoolInsert", "PersonSchoolInsert", "personSchool", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Extension", type: "string", value: Extension, nullable: true}, {name: "Scan", type: "string", value: Scan, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "Photo", type: "string", value: Photo, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"PhotoResized","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.PersonSchoolUpdate = function(ID_Login, ID, ID_Person, DisplayName, City, Extension, Scan, DateCreate, PhotoExtension, Photo, callback) {
  this.soapRequest("https://is.skaut.cz/PersonSchoolUpdate", "PersonSchoolUpdate", "personSchool", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Extension", type: "string", value: Extension, nullable: true}, {name: "Scan", type: "string", value: Scan, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "Photo", type: "string", value: Photo, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"PhotoResized","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.PersonMistakeReportDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonMistakeReportDetail", "PersonMistakeReportDetail", "personMistakeReportDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"ID_Mistake","paramType":"s:int"},{"paramName":"Mistake","paramType":"s:string"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ParentComment","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.PersonMistakeReportUpdate = function(ID_Login, ID, ID_Person, Person, ID_Mistake, Mistake, DisplayName, ParentComment, callback) {
  this.soapRequest("https://is.skaut.cz/PersonMistakeReportUpdate", "PersonMistakeReportUpdate", "personMistakeReport", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_Mistake", type: "int", value: ID_Mistake, nullable: true}, {name: "Mistake", type: "string", value: Mistake, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ParentComment", type: "string", value: ParentComment, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonRegistrationServiceAllSummary = function(ID_Login, ID_UnitRegistration, callback) {
  this.soapRequest("https://is.skaut.cz/PersonRegistrationServiceAllSummary", "PersonRegistrationServiceAllSummary", "personRegistrationServiceAllSummaryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistration", type: "int", value: ID_UnitRegistration, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitMistakeReportDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitMistakeReportDetail", "UnitMistakeReportDetail", "unitMistakeReportDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"ID_Mistake","paramType":"s:int"},{"paramName":"Mistake","paramType":"s:string"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ParentComment","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.UnitMistakeReportUpdate = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, ID_Mistake, Mistake, DisplayName, ParentComment, callback) {
  this.soapRequest("https://is.skaut.cz/UnitMistakeReportUpdate", "UnitMistakeReportUpdate", "unitMistakeReport", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ID_Mistake", type: "int", value: ID_Mistake, nullable: true}, {name: "Mistake", type: "string", value: Mistake, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ParentComment", type: "string", value: ParentComment, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitAgeCategoryDetail = function(ID_Login, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/UnitAgeCategoryDetail", "UnitAgeCategoryDetail", "unitAgeCategoryDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}], [{"paramName":"ID_AgeCategory","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"IsMore","paramType":"s:boolean"},{"paramName":"ValidFrom","paramType":"s:dateTime"}], false, callback);
}
OrganizationUnit.prototype.UnitAgeCategoryUpdate = function(ID_Login, ID, ID_AgeCategory, callback) {
  this.soapRequest("https://is.skaut.cz/UnitAgeCategoryUpdate", "UnitAgeCategoryUpdate", "unitAgeCategoryUpdateInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_AgeCategory", type: "int", value: ID_AgeCategory, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.UnitHandicapAllUnit = function(ID_Login, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/UnitHandicapAllUnit", "UnitHandicapAllUnit", "unitHandicapAllUnitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.UnitHandicapLastUpdated = function(ID_Login, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/UnitHandicapLastUpdated", "UnitHandicapLastUpdated", "unitHandicapLastUpdatedInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}], [{"paramName":"LastUpdated","paramType":"s:dateTime"}], false, callback);
}
OrganizationUnit.prototype.UnitHandicapUpdate = function(ID_Login, ID_Unit, ID_HandicapType, Value, callback) {
  this.soapRequest("https://is.skaut.cz/UnitHandicapUpdate", "UnitHandicapUpdate", "unitHandicapUpdateInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_HandicapType", type: "int", value: ID_HandicapType, nullable: false}, {name: "Value", type: "int", value: Value, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.UnitUpdateChangeFreeJournal = function(ID_Login, ID, ChangeFreeJournal, IncludeChild, callback) {
  this.soapRequest("https://is.skaut.cz/UnitUpdateChangeFreeJournal", "UnitUpdateChangeFreeJournal", "unitUpdateChangeFreeJournalInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ChangeFreeJournal", type: "bool", value: ChangeFreeJournal, nullable: true}, {name: "IncludeChild", type: "string", value: IncludeChild, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegistryAll = function(ID_Login, DisplayName, ID_Unit, ID_RegistryObject, ID_RegistryType, ID_RegistryState, DateCreateFrom, DateCreateTo, DateCreateMonth, DateCreateYear, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryAll", "RegistryAll", "registryAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_RegistryObject", type: "string", value: ID_RegistryObject, nullable: true}, {name: "ID_RegistryType", type: "string", value: ID_RegistryType, nullable: true}, {name: "ID_RegistryState", type: "string", value: ID_RegistryState, nullable: true}, {name: "DateCreateFrom", type: "string", value: DateCreateFrom, nullable: true}, {name: "DateCreateTo", type: "string", value: DateCreateTo, nullable: true}, {name: "DateCreateMonth", type: "int", value: DateCreateMonth, nullable: true}, {name: "DateCreateYear", type: "int", value: DateCreateYear, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RegistryAllMessage = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryAllMessage", "RegistryAllMessage", "registryAllMessageInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.RegistryAllMinistry = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryAllMinistry", "RegistryAllMinistry", "registryAllMinistryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.RegistryDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryDetail", "RegistryDetail", "registryDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Sequence","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"IC","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"IsPropertyOwner","paramType":"s:boolean"},{"paramName":"PropertyAgreementExtension","paramType":"s:string"},{"paramName":"UnitOld","paramType":"s:string"},{"paramName":"StreetOld","paramType":"s:string"},{"paramName":"CityOld","paramType":"s:string"},{"paramName":"PostcodeOld","paramType":"s:string"},{"paramName":"IsPropertyOwnerOld","paramType":"s:boolean"},{"paramName":"ID_RegistryObject","paramType":"s:string"},{"paramName":"RegistryObject","paramType":"s:string"},{"paramName":"ID_RegistryType","paramType":"s:string"},{"paramName":"RegistryType","paramType":"s:string"},{"paramName":"ID_RegistryState","paramType":"s:string"},{"paramName":"RegistryState","paramType":"s:string"},{"paramName":"OldHistoryObjectId","paramType":"s:int"},{"paramName":"NewHistoryObjectId","paramType":"s:int"},{"paramName":"ID_PersonCreate","paramType":"s:int"},{"paramName":"PersonCreate","paramType":"s:string"},{"paramName":"DateCreate","paramType":"s:dateTime"},{"paramName":"ID_PersonUpdate","paramType":"s:int"},{"paramName":"PersonUpdate","paramType":"s:string"},{"paramName":"DateUpdate","paramType":"s:dateTime"},{"paramName":"ID_PersonSent","paramType":"s:int"},{"paramName":"PersonSent","paramType":"s:string"},{"paramName":"DateSent","paramType":"s:dateTime"},{"paramName":"ID_PersonClosed","paramType":"s:int"},{"paramName":"PersonClosed","paramType":"s:string"},{"paramName":"DateClosed","paramType":"s:dateTime"},{"paramName":"ID_PersonCancel","paramType":"s:int"},{"paramName":"PersonCancel","paramType":"s:string"},{"paramName":"DateCancel","paramType":"s:dateTime"},{"paramName":"CancelDecision","paramType":"s:string"},{"paramName":"ID_Function","paramType":"s:int"},{"paramName":"ID_FunctionType","paramType":"s:int"},{"paramName":"FunctionType","paramType":"s:string"},{"paramName":"PersonFunction","paramType":"s:string"},{"paramName":"PersonFunctionOld","paramType":"s:string"},{"paramName":"Account","paramType":"s:string"},{"paramName":"NewAccount","paramType":"s:boolean"},{"paramName":"ID_PersonFunction","paramType":"s:int"},{"paramName":"ID_PersonFunctionOld","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RegistrySendFunctionParentMessage = function(ID_Login, ID, DisplayName, Sequence, ID_Unit, Unit, RegistrationNumber, IC, Street, City, Postcode, IsPropertyOwner, PropertyAgreementExtension, UnitOld, StreetOld, CityOld, PostcodeOld, IsPropertyOwnerOld, ID_RegistryObject, RegistryObject, ID_RegistryType, RegistryType, ID_RegistryState, RegistryState, OldHistoryObjectId, NewHistoryObjectId, ID_PersonCreate, PersonCreate, DateCreate, ID_PersonUpdate, PersonUpdate, DateUpdate, ID_PersonSent, PersonSent, DateSent, ID_PersonClosed, PersonClosed, DateClosed, ID_PersonCancel, PersonCancel, DateCancel, CancelDecision, ID_Function, ID_FunctionType, FunctionType, PersonFunction, PersonFunctionOld, Account, NewAccount, ID_PersonFunction, ID_PersonFunctionOld, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrySendFunctionParentMessage", "RegistrySendFunctionParentMessage", "registry", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Sequence", type: "int", value: Sequence, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "UnitOld", type: "string", value: UnitOld, nullable: true}, {name: "StreetOld", type: "string", value: StreetOld, nullable: true}, {name: "CityOld", type: "string", value: CityOld, nullable: true}, {name: "PostcodeOld", type: "string", value: PostcodeOld, nullable: true}, {name: "IsPropertyOwnerOld", type: "bool", value: IsPropertyOwnerOld, nullable: true}, {name: "ID_RegistryObject", type: "string", value: ID_RegistryObject, nullable: true}, {name: "RegistryObject", type: "string", value: RegistryObject, nullable: true}, {name: "ID_RegistryType", type: "string", value: ID_RegistryType, nullable: true}, {name: "RegistryType", type: "string", value: RegistryType, nullable: true}, {name: "ID_RegistryState", type: "string", value: ID_RegistryState, nullable: true}, {name: "RegistryState", type: "string", value: RegistryState, nullable: true}, {name: "OldHistoryObjectId", type: "int", value: OldHistoryObjectId, nullable: true}, {name: "NewHistoryObjectId", type: "int", value: NewHistoryObjectId, nullable: true}, {name: "ID_PersonCreate", type: "int", value: ID_PersonCreate, nullable: true}, {name: "PersonCreate", type: "string", value: PersonCreate, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_PersonUpdate", type: "int", value: ID_PersonUpdate, nullable: true}, {name: "PersonUpdate", type: "string", value: PersonUpdate, nullable: true}, {name: "DateUpdate", type: "string", value: DateUpdate, nullable: true}, {name: "ID_PersonSent", type: "int", value: ID_PersonSent, nullable: true}, {name: "PersonSent", type: "string", value: PersonSent, nullable: true}, {name: "DateSent", type: "string", value: DateSent, nullable: true}, {name: "ID_PersonClosed", type: "int", value: ID_PersonClosed, nullable: true}, {name: "PersonClosed", type: "string", value: PersonClosed, nullable: true}, {name: "DateClosed", type: "string", value: DateClosed, nullable: true}, {name: "ID_PersonCancel", type: "int", value: ID_PersonCancel, nullable: true}, {name: "PersonCancel", type: "string", value: PersonCancel, nullable: true}, {name: "DateCancel", type: "string", value: DateCancel, nullable: true}, {name: "CancelDecision", type: "string", value: CancelDecision, nullable: true}, {name: "ID_Function", type: "int", value: ID_Function, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "FunctionType", type: "string", value: FunctionType, nullable: true}, {name: "PersonFunction", type: "string", value: PersonFunction, nullable: true}, {name: "PersonFunctionOld", type: "string", value: PersonFunctionOld, nullable: true}, {name: "Account", type: "string", value: Account, nullable: true}, {name: "NewAccount", type: "bool", value: NewAccount, nullable: true}, {name: "ID_PersonFunction", type: "int", value: ID_PersonFunction, nullable: true}, {name: "ID_PersonFunctionOld", type: "int", value: ID_PersonFunctionOld, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegistryStateAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryStateAll", "RegistryStateAll", "registryStateAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RegistryTypeAll = function(ID_Login, DisplayName, ID_RegistryObject, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryTypeAll", "RegistryTypeAll", "registryTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_RegistryObject", type: "string", value: ID_RegistryObject, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RegistryUpdateCancel = function(ID_Login, ID, DisplayName, Sequence, ID_Unit, Unit, RegistrationNumber, IC, Street, City, Postcode, IsPropertyOwner, PropertyAgreementExtension, UnitOld, StreetOld, CityOld, PostcodeOld, IsPropertyOwnerOld, ID_RegistryObject, RegistryObject, ID_RegistryType, RegistryType, ID_RegistryState, RegistryState, OldHistoryObjectId, NewHistoryObjectId, ID_PersonCreate, PersonCreate, DateCreate, ID_PersonUpdate, PersonUpdate, DateUpdate, ID_PersonSent, PersonSent, DateSent, ID_PersonClosed, PersonClosed, DateClosed, ID_PersonCancel, PersonCancel, DateCancel, CancelDecision, ID_Function, ID_FunctionType, FunctionType, PersonFunction, PersonFunctionOld, Account, NewAccount, ID_PersonFunction, ID_PersonFunctionOld, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryUpdateCancel", "RegistryUpdateCancel", "registry", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Sequence", type: "int", value: Sequence, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "UnitOld", type: "string", value: UnitOld, nullable: true}, {name: "StreetOld", type: "string", value: StreetOld, nullable: true}, {name: "CityOld", type: "string", value: CityOld, nullable: true}, {name: "PostcodeOld", type: "string", value: PostcodeOld, nullable: true}, {name: "IsPropertyOwnerOld", type: "bool", value: IsPropertyOwnerOld, nullable: true}, {name: "ID_RegistryObject", type: "string", value: ID_RegistryObject, nullable: true}, {name: "RegistryObject", type: "string", value: RegistryObject, nullable: true}, {name: "ID_RegistryType", type: "string", value: ID_RegistryType, nullable: true}, {name: "RegistryType", type: "string", value: RegistryType, nullable: true}, {name: "ID_RegistryState", type: "string", value: ID_RegistryState, nullable: true}, {name: "RegistryState", type: "string", value: RegistryState, nullable: true}, {name: "OldHistoryObjectId", type: "int", value: OldHistoryObjectId, nullable: true}, {name: "NewHistoryObjectId", type: "int", value: NewHistoryObjectId, nullable: true}, {name: "ID_PersonCreate", type: "int", value: ID_PersonCreate, nullable: true}, {name: "PersonCreate", type: "string", value: PersonCreate, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_PersonUpdate", type: "int", value: ID_PersonUpdate, nullable: true}, {name: "PersonUpdate", type: "string", value: PersonUpdate, nullable: true}, {name: "DateUpdate", type: "string", value: DateUpdate, nullable: true}, {name: "ID_PersonSent", type: "int", value: ID_PersonSent, nullable: true}, {name: "PersonSent", type: "string", value: PersonSent, nullable: true}, {name: "DateSent", type: "string", value: DateSent, nullable: true}, {name: "ID_PersonClosed", type: "int", value: ID_PersonClosed, nullable: true}, {name: "PersonClosed", type: "string", value: PersonClosed, nullable: true}, {name: "DateClosed", type: "string", value: DateClosed, nullable: true}, {name: "ID_PersonCancel", type: "int", value: ID_PersonCancel, nullable: true}, {name: "PersonCancel", type: "string", value: PersonCancel, nullable: true}, {name: "DateCancel", type: "string", value: DateCancel, nullable: true}, {name: "CancelDecision", type: "string", value: CancelDecision, nullable: true}, {name: "ID_Function", type: "int", value: ID_Function, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "FunctionType", type: "string", value: FunctionType, nullable: true}, {name: "PersonFunction", type: "string", value: PersonFunction, nullable: true}, {name: "PersonFunctionOld", type: "string", value: PersonFunctionOld, nullable: true}, {name: "Account", type: "string", value: Account, nullable: true}, {name: "NewAccount", type: "bool", value: NewAccount, nullable: true}, {name: "ID_PersonFunction", type: "int", value: ID_PersonFunction, nullable: true}, {name: "ID_PersonFunctionOld", type: "int", value: ID_PersonFunctionOld, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegistryUpdateClose = function(ID_Login, ID, DisplayName, Sequence, ID_Unit, Unit, RegistrationNumber, IC, Street, City, Postcode, IsPropertyOwner, PropertyAgreementExtension, UnitOld, StreetOld, CityOld, PostcodeOld, IsPropertyOwnerOld, ID_RegistryObject, RegistryObject, ID_RegistryType, RegistryType, ID_RegistryState, RegistryState, OldHistoryObjectId, NewHistoryObjectId, ID_PersonCreate, PersonCreate, DateCreate, ID_PersonUpdate, PersonUpdate, DateUpdate, ID_PersonSent, PersonSent, DateSent, ID_PersonClosed, PersonClosed, DateClosed, ID_PersonCancel, PersonCancel, DateCancel, CancelDecision, ID_Function, ID_FunctionType, FunctionType, PersonFunction, PersonFunctionOld, Account, NewAccount, ID_PersonFunction, ID_PersonFunctionOld, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryUpdateClose", "RegistryUpdateClose", "registry", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Sequence", type: "int", value: Sequence, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "UnitOld", type: "string", value: UnitOld, nullable: true}, {name: "StreetOld", type: "string", value: StreetOld, nullable: true}, {name: "CityOld", type: "string", value: CityOld, nullable: true}, {name: "PostcodeOld", type: "string", value: PostcodeOld, nullable: true}, {name: "IsPropertyOwnerOld", type: "bool", value: IsPropertyOwnerOld, nullable: true}, {name: "ID_RegistryObject", type: "string", value: ID_RegistryObject, nullable: true}, {name: "RegistryObject", type: "string", value: RegistryObject, nullable: true}, {name: "ID_RegistryType", type: "string", value: ID_RegistryType, nullable: true}, {name: "RegistryType", type: "string", value: RegistryType, nullable: true}, {name: "ID_RegistryState", type: "string", value: ID_RegistryState, nullable: true}, {name: "RegistryState", type: "string", value: RegistryState, nullable: true}, {name: "OldHistoryObjectId", type: "int", value: OldHistoryObjectId, nullable: true}, {name: "NewHistoryObjectId", type: "int", value: NewHistoryObjectId, nullable: true}, {name: "ID_PersonCreate", type: "int", value: ID_PersonCreate, nullable: true}, {name: "PersonCreate", type: "string", value: PersonCreate, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_PersonUpdate", type: "int", value: ID_PersonUpdate, nullable: true}, {name: "PersonUpdate", type: "string", value: PersonUpdate, nullable: true}, {name: "DateUpdate", type: "string", value: DateUpdate, nullable: true}, {name: "ID_PersonSent", type: "int", value: ID_PersonSent, nullable: true}, {name: "PersonSent", type: "string", value: PersonSent, nullable: true}, {name: "DateSent", type: "string", value: DateSent, nullable: true}, {name: "ID_PersonClosed", type: "int", value: ID_PersonClosed, nullable: true}, {name: "PersonClosed", type: "string", value: PersonClosed, nullable: true}, {name: "DateClosed", type: "string", value: DateClosed, nullable: true}, {name: "ID_PersonCancel", type: "int", value: ID_PersonCancel, nullable: true}, {name: "PersonCancel", type: "string", value: PersonCancel, nullable: true}, {name: "DateCancel", type: "string", value: DateCancel, nullable: true}, {name: "CancelDecision", type: "string", value: CancelDecision, nullable: true}, {name: "ID_Function", type: "int", value: ID_Function, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "FunctionType", type: "string", value: FunctionType, nullable: true}, {name: "PersonFunction", type: "string", value: PersonFunction, nullable: true}, {name: "PersonFunctionOld", type: "string", value: PersonFunctionOld, nullable: true}, {name: "Account", type: "string", value: Account, nullable: true}, {name: "NewAccount", type: "bool", value: NewAccount, nullable: true}, {name: "ID_PersonFunction", type: "int", value: ID_PersonFunction, nullable: true}, {name: "ID_PersonFunctionOld", type: "int", value: ID_PersonFunctionOld, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegistryUpdateSend = function(ID_Login, ID, DisplayName, Sequence, ID_Unit, Unit, RegistrationNumber, IC, Street, City, Postcode, IsPropertyOwner, PropertyAgreementExtension, UnitOld, StreetOld, CityOld, PostcodeOld, IsPropertyOwnerOld, ID_RegistryObject, RegistryObject, ID_RegistryType, RegistryType, ID_RegistryState, RegistryState, OldHistoryObjectId, NewHistoryObjectId, ID_PersonCreate, PersonCreate, DateCreate, ID_PersonUpdate, PersonUpdate, DateUpdate, ID_PersonSent, PersonSent, DateSent, ID_PersonClosed, PersonClosed, DateClosed, ID_PersonCancel, PersonCancel, DateCancel, CancelDecision, ID_Function, ID_FunctionType, FunctionType, PersonFunction, PersonFunctionOld, Account, NewAccount, ID_PersonFunction, ID_PersonFunctionOld, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryUpdateSend", "RegistryUpdateSend", "registry", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Sequence", type: "int", value: Sequence, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "UnitOld", type: "string", value: UnitOld, nullable: true}, {name: "StreetOld", type: "string", value: StreetOld, nullable: true}, {name: "CityOld", type: "string", value: CityOld, nullable: true}, {name: "PostcodeOld", type: "string", value: PostcodeOld, nullable: true}, {name: "IsPropertyOwnerOld", type: "bool", value: IsPropertyOwnerOld, nullable: true}, {name: "ID_RegistryObject", type: "string", value: ID_RegistryObject, nullable: true}, {name: "RegistryObject", type: "string", value: RegistryObject, nullable: true}, {name: "ID_RegistryType", type: "string", value: ID_RegistryType, nullable: true}, {name: "RegistryType", type: "string", value: RegistryType, nullable: true}, {name: "ID_RegistryState", type: "string", value: ID_RegistryState, nullable: true}, {name: "RegistryState", type: "string", value: RegistryState, nullable: true}, {name: "OldHistoryObjectId", type: "int", value: OldHistoryObjectId, nullable: true}, {name: "NewHistoryObjectId", type: "int", value: NewHistoryObjectId, nullable: true}, {name: "ID_PersonCreate", type: "int", value: ID_PersonCreate, nullable: true}, {name: "PersonCreate", type: "string", value: PersonCreate, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_PersonUpdate", type: "int", value: ID_PersonUpdate, nullable: true}, {name: "PersonUpdate", type: "string", value: PersonUpdate, nullable: true}, {name: "DateUpdate", type: "string", value: DateUpdate, nullable: true}, {name: "ID_PersonSent", type: "int", value: ID_PersonSent, nullable: true}, {name: "PersonSent", type: "string", value: PersonSent, nullable: true}, {name: "DateSent", type: "string", value: DateSent, nullable: true}, {name: "ID_PersonClosed", type: "int", value: ID_PersonClosed, nullable: true}, {name: "PersonClosed", type: "string", value: PersonClosed, nullable: true}, {name: "DateClosed", type: "string", value: DateClosed, nullable: true}, {name: "ID_PersonCancel", type: "int", value: ID_PersonCancel, nullable: true}, {name: "PersonCancel", type: "string", value: PersonCancel, nullable: true}, {name: "DateCancel", type: "string", value: DateCancel, nullable: true}, {name: "CancelDecision", type: "string", value: CancelDecision, nullable: true}, {name: "ID_Function", type: "int", value: ID_Function, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "FunctionType", type: "string", value: FunctionType, nullable: true}, {name: "PersonFunction", type: "string", value: PersonFunction, nullable: true}, {name: "PersonFunctionOld", type: "string", value: PersonFunctionOld, nullable: true}, {name: "Account", type: "string", value: Account, nullable: true}, {name: "NewAccount", type: "bool", value: NewAccount, nullable: true}, {name: "ID_PersonFunction", type: "int", value: ID_PersonFunction, nullable: true}, {name: "ID_PersonFunctionOld", type: "int", value: ID_PersonFunctionOld, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegistryUpdateSendMessage = function(ID_Login, ID, DisplayName, Sequence, ID_Unit, Unit, RegistrationNumber, IC, Street, City, Postcode, IsPropertyOwner, PropertyAgreementExtension, UnitOld, StreetOld, CityOld, PostcodeOld, IsPropertyOwnerOld, ID_RegistryObject, RegistryObject, ID_RegistryType, RegistryType, ID_RegistryState, RegistryState, OldHistoryObjectId, NewHistoryObjectId, ID_PersonCreate, PersonCreate, DateCreate, ID_PersonUpdate, PersonUpdate, DateUpdate, ID_PersonSent, PersonSent, DateSent, ID_PersonClosed, PersonClosed, DateClosed, ID_PersonCancel, PersonCancel, DateCancel, CancelDecision, ID_Function, ID_FunctionType, FunctionType, PersonFunction, PersonFunctionOld, Account, NewAccount, ID_PersonFunction, ID_PersonFunctionOld, callback) {
  this.soapRequest("https://is.skaut.cz/RegistryUpdateSendMessage", "RegistryUpdateSendMessage", "registry", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Sequence", type: "int", value: Sequence, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "UnitOld", type: "string", value: UnitOld, nullable: true}, {name: "StreetOld", type: "string", value: StreetOld, nullable: true}, {name: "CityOld", type: "string", value: CityOld, nullable: true}, {name: "PostcodeOld", type: "string", value: PostcodeOld, nullable: true}, {name: "IsPropertyOwnerOld", type: "bool", value: IsPropertyOwnerOld, nullable: true}, {name: "ID_RegistryObject", type: "string", value: ID_RegistryObject, nullable: true}, {name: "RegistryObject", type: "string", value: RegistryObject, nullable: true}, {name: "ID_RegistryType", type: "string", value: ID_RegistryType, nullable: true}, {name: "RegistryType", type: "string", value: RegistryType, nullable: true}, {name: "ID_RegistryState", type: "string", value: ID_RegistryState, nullable: true}, {name: "RegistryState", type: "string", value: RegistryState, nullable: true}, {name: "OldHistoryObjectId", type: "int", value: OldHistoryObjectId, nullable: true}, {name: "NewHistoryObjectId", type: "int", value: NewHistoryObjectId, nullable: true}, {name: "ID_PersonCreate", type: "int", value: ID_PersonCreate, nullable: true}, {name: "PersonCreate", type: "string", value: PersonCreate, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_PersonUpdate", type: "int", value: ID_PersonUpdate, nullable: true}, {name: "PersonUpdate", type: "string", value: PersonUpdate, nullable: true}, {name: "DateUpdate", type: "string", value: DateUpdate, nullable: true}, {name: "ID_PersonSent", type: "int", value: ID_PersonSent, nullable: true}, {name: "PersonSent", type: "string", value: PersonSent, nullable: true}, {name: "DateSent", type: "string", value: DateSent, nullable: true}, {name: "ID_PersonClosed", type: "int", value: ID_PersonClosed, nullable: true}, {name: "PersonClosed", type: "string", value: PersonClosed, nullable: true}, {name: "DateClosed", type: "string", value: DateClosed, nullable: true}, {name: "ID_PersonCancel", type: "int", value: ID_PersonCancel, nullable: true}, {name: "PersonCancel", type: "string", value: PersonCancel, nullable: true}, {name: "DateCancel", type: "string", value: DateCancel, nullable: true}, {name: "CancelDecision", type: "string", value: CancelDecision, nullable: true}, {name: "ID_Function", type: "int", value: ID_Function, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "FunctionType", type: "string", value: FunctionType, nullable: true}, {name: "PersonFunction", type: "string", value: PersonFunction, nullable: true}, {name: "PersonFunctionOld", type: "string", value: PersonFunctionOld, nullable: true}, {name: "Account", type: "string", value: Account, nullable: true}, {name: "NewAccount", type: "bool", value: NewAccount, nullable: true}, {name: "ID_PersonFunction", type: "int", value: ID_PersonFunction, nullable: true}, {name: "ID_PersonFunctionOld", type: "int", value: ID_PersonFunctionOld, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.StatementUpdateOpen = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Year, ID_StatementType, StatementType, IsError, IsDelivered, DateDelivered, IsThousands, IsConsultant, callback) {
  this.soapRequest("https://is.skaut.cz/StatementUpdateOpen", "StatementUpdateOpen", "statement", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "ID_StatementType", type: "string", value: ID_StatementType, nullable: true}, {name: "StatementType", type: "string", value: StatementType, nullable: true}, {name: "IsError", type: "bool", value: IsError, nullable: true}, {name: "IsDelivered", type: "bool", value: IsDelivered, nullable: true}, {name: "DateDelivered", type: "string", value: DateDelivered, nullable: true}, {name: "IsThousands", type: "bool", value: IsThousands, nullable: true}, {name: "IsConsultant", type: "bool", value: IsConsultant, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonHonourDownloadScan = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourDownloadScan", "PersonHonourDownloadScan", "personHonourDownloadScanInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"FileName","paramType":"s:string"},{"paramName":"FileContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.HonourAllGrant = function(ID_Login, DisplayName, ID, callback) {
  this.soapRequest("https://is.skaut.cz/HonourAllGrant", "HonourAllGrant", "honourAllGrantInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.HonourAll = function(ID_Login, DisplayName, ID, IsActive, callback) {
  this.soapRequest("https://is.skaut.cz/HonourAll", "HonourAll", "honourAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.HonourDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/HonourDetail", "HonourDetail", "honourDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"IsActive","paramType":"s:boolean"},{"paramName":"Description","paramType":"s:string"},{"paramName":"FileName","paramType":"s:string"},{"paramName":"ImageContent","paramType":"s:base64Binary"},{"paramName":"StateUrl","paramType":"s:string"},{"paramName":"MaxCount","paramType":"s:int"},{"paramName":"DescriptionUrl","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.HonourImage = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/HonourImage", "HonourImage", "honourPictureInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"FileName","paramType":"s:string"},{"paramName":"Content","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.HonourInsert = function(ID_Login, ID, DisplayName, IsActive, Description, FileName, ImageContent, StateUrl, MaxCount, DescriptionUrl, callback) {
  this.soapRequest("https://is.skaut.cz/HonourInsert", "HonourInsert", "honour", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "FileName", type: "string", value: FileName, nullable: true}, {name: "ImageContent", type: "string", value: ImageContent, nullable: true}, {name: "StateUrl", type: "string", value: StateUrl, nullable: true}, {name: "MaxCount", type: "int", value: MaxCount, nullable: true}, {name: "DescriptionUrl", type: "string", value: DescriptionUrl, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.HonourUnitAll = function(ID_Login, ID_Honour, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/HonourUnitAll", "HonourUnitAll", "honourUnitAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Honour", type: "int", value: ID_Honour, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.HonourUnitDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/HonourUnitDelete", "HonourUnitDelete", "honourUnitDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.HonourUnitInsert = function(ID_Login, ID_Honour, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/HonourUnitInsert", "HonourUnitInsert", "honourUnitInsertInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Honour", type: "int", value: ID_Honour, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.HonourUpdate = function(ID_Login, ID, DisplayName, IsActive, Description, FileName, ImageContent, StateUrl, MaxCount, DescriptionUrl, callback) {
  this.soapRequest("https://is.skaut.cz/HonourUpdate", "HonourUpdate", "honour", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "FileName", type: "string", value: FileName, nullable: true}, {name: "ImageContent", type: "string", value: ImageContent, nullable: true}, {name: "StateUrl", type: "string", value: StateUrl, nullable: true}, {name: "MaxCount", type: "int", value: MaxCount, nullable: true}, {name: "DescriptionUrl", type: "string", value: DescriptionUrl, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonAllJobs = function(ID_Login, FirstName, LastName, NickName, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllJobs", "PersonAllJobs", "personAllJobsInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "NickName", type: "string", value: NickName, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllJubilant = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllJubilant", "PersonAllJubilant", "personAllJubilantInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.PersonHonourAll = function(IsValid, ID_Login, ID_Person, ID_Honour, PersonDisplayName, LetterNumber, Suggester, YearValidFrom, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourAll", "PersonHonourAll", "personHonourAllInput", [{name: "IsValid", type: "bool", value: IsValid, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Honour", type: "int", value: ID_Honour, nullable: true}, {name: "PersonDisplayName", type: "string", value: PersonDisplayName, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "Suggester", type: "string", value: Suggester, nullable: true}, {name: "YearValidFrom", type: "int", value: YearValidFrom, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonHonourAllLogin = function(IsValid, ID_Login, ID_Person, ID_Honour, PersonDisplayName, LetterNumber, Suggester, YearValidFrom, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourAllLogin", "PersonHonourAllLogin", "personHonourAllLoginInput", [{name: "IsValid", type: "bool", value: IsValid, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Honour", type: "int", value: ID_Honour, nullable: true}, {name: "PersonDisplayName", type: "string", value: PersonDisplayName, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "Suggester", type: "string", value: Suggester, nullable: true}, {name: "YearValidFrom", type: "int", value: YearValidFrom, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonHonourAllPerson = function(IsValid, ID_Login, ID_Person, ID_Honour, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourAllPerson", "PersonHonourAllPerson", "personHonourAllInput", [{name: "IsValid", type: "bool", value: IsValid, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Honour", type: "int", value: ID_Honour, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonHonourDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourDelete", "PersonHonourDelete", "personHonourDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.PersonHonourDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourDetail", "PersonHonourDetail", "personHonourDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"ID_Honour","paramType":"s:int"},{"paramName":"Honour","paramType":"s:string"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"Suggester","paramType":"s:string"},{"paramName":"ID_PersonSuggester","paramType":"s:int"},{"paramName":"ID_UnitSuggester","paramType":"s:int"},{"paramName":"SuggesterDisplayName","paramType":"s:string"},{"paramName":"LetterNumber","paramType":"s:string"},{"paramName":"InMemorian","paramType":"s:boolean"},{"paramName":"Reason","paramType":"s:string"},{"paramName":"FileName","paramType":"s:string"},{"paramName":"FileContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.PersonHonourInsert = function(ID_Login, ID_Person, ID_Honour, ValidFrom, ValidTo, Suggester, ID_PersonSuggester, ID_UnitSuggester, LetterNumber, InMemorian, Reason, FileName, FileContent, Person, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourInsert", "PersonHonourInsert", "personHonourInsertInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Honour", type: "int", value: ID_Honour, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "Suggester", type: "string", value: Suggester, nullable: true}, {name: "ID_PersonSuggester", type: "int", value: ID_PersonSuggester, nullable: true}, {name: "ID_UnitSuggester", type: "int", value: ID_UnitSuggester, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "InMemorian", type: "bool", value: InMemorian, nullable: true}, {name: "Reason", type: "string", value: Reason, nullable: true}, {name: "FileName", type: "string", value: FileName, nullable: true}, {name: "FileContent", type: "string", value: FileContent, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.PersonHonourUpdate = function(ID_Login, ID, ID_Person, Person, ID_Honour, Honour, ValidFrom, ValidTo, Suggester, ID_PersonSuggester, ID_UnitSuggester, SuggesterDisplayName, LetterNumber, InMemorian, Reason, FileName, FileContent, callback) {
  this.soapRequest("https://is.skaut.cz/PersonHonourUpdate", "PersonHonourUpdate", "personHonourUpdateInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_Honour", type: "int", value: ID_Honour, nullable: true}, {name: "Honour", type: "string", value: Honour, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "Suggester", type: "string", value: Suggester, nullable: true}, {name: "ID_PersonSuggester", type: "int", value: ID_PersonSuggester, nullable: true}, {name: "ID_UnitSuggester", type: "int", value: ID_UnitSuggester, nullable: true}, {name: "SuggesterDisplayName", type: "string", value: SuggesterDisplayName, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "InMemorian", type: "bool", value: InMemorian, nullable: true}, {name: "Reason", type: "string", value: Reason, nullable: true}, {name: "FileName", type: "string", value: FileName, nullable: true}, {name: "FileContent", type: "string", value: FileContent, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonUpdatePersonType = function(ID_Login, ID, ID_PersonType, callback) {
  this.soapRequest("https://is.skaut.cz/PersonUpdatePersonType", "PersonUpdatePersonType", "personUpdatePersonTypeInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_PersonType", type: "string", value: ID_PersonType, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RegistrationServiceAll = function(ID_Login, ID_UnitRegistration, ID_RegistrationServiceType, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrationServiceAll", "RegistrationServiceAll", "registrationServiceAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistration", type: "int", value: ID_UnitRegistration, nullable: false}, {name: "ID_RegistrationServiceType", type: "string", value: ID_RegistrationServiceType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RegistrationServiceInsert = function(ID_Login, ID_UnitRegistration, ID_RegistrationServiceType, Ammount, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrationServiceInsert", "RegistrationServiceInsert", "registrationService", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_UnitRegistration", type: "int", value: ID_UnitRegistration, nullable: false}, {name: "ID_RegistrationServiceType", type: "string", value: ID_RegistrationServiceType, nullable: true}, {name: "Ammount", type: "float", value: Ammount, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RegistrationServiceTypeAll = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/RegistrationServiceTypeAll", "RegistrationServiceTypeAll", "registrationServiceTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitRegistrationAllParent = function(ID_Login, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/UnitRegistrationAllParent", "UnitRegistrationAllParent", "unitRegistrationAllParentInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.UnitUpdateJournalParent = function(ID_Login, ID, OnlyValidate, IsPropertyOwner, ID_JournalNovice, FullDisplayName, ID_Group, ID_Unit, ID_UnitType, UnitType, ContainsMembers, CommissionDeadline, DisplayName, SortName, RegistrationNumber, ShortRegistrationNumber, Location, IC, IsVatPayer, DIC, FileReference, Street, City, Postcode, State, PostalFirstLine, PostalStreet, PostalCity, PostalPostcode, PostalState, Note, ID_TroopArt, TroopArt, CanUpdateRegistrationNumber, LogoContent, LogoExtension, IsUnitCancel, JournalParent, ChangeFreeJournal, ID_UnitParent, IsPostalAuthenticated, IsAddressAuthenticated, AddressDistrict, PostalDistrict, NewDisplayName, CompleteDisplayName, ID_PersonChangeName, PersonChangeName, DateChangeName, PropertyAgreementExtension, ID_TempFilePropertyAgreement, PropertyAgreementContent, callback) {
  this.soapRequest("https://is.skaut.cz/UnitUpdateJournalParent", "UnitUpdateJournalParent", "unit", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}, {name: "IsPropertyOwner", type: "bool", value: IsPropertyOwner, nullable: true}, {name: "ID_JournalNovice", type: "string", value: ID_JournalNovice, nullable: true}, {name: "FullDisplayName", type: "string", value: FullDisplayName, nullable: true}, {name: "ID_Group", type: "int", value: ID_Group, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_UnitType", type: "string", value: ID_UnitType, nullable: true}, {name: "UnitType", type: "string", value: UnitType, nullable: true}, {name: "ContainsMembers", type: "bool", value: ContainsMembers, nullable: true}, {name: "CommissionDeadline", type: "int", value: CommissionDeadline, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "SortName", type: "string", value: SortName, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "ShortRegistrationNumber", type: "string", value: ShortRegistrationNumber, nullable: true}, {name: "Location", type: "string", value: Location, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "IsVatPayer", type: "bool", value: IsVatPayer, nullable: true}, {name: "DIC", type: "string", value: DIC, nullable: true}, {name: "FileReference", type: "string", value: FileReference, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "PostalFirstLine", type: "string", value: PostalFirstLine, nullable: true}, {name: "PostalStreet", type: "string", value: PostalStreet, nullable: true}, {name: "PostalCity", type: "string", value: PostalCity, nullable: true}, {name: "PostalPostcode", type: "string", value: PostalPostcode, nullable: true}, {name: "PostalState", type: "string", value: PostalState, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_TroopArt", type: "int", value: ID_TroopArt, nullable: true}, {name: "TroopArt", type: "string", value: TroopArt, nullable: true}, {name: "CanUpdateRegistrationNumber", type: "bool", value: CanUpdateRegistrationNumber, nullable: true}, {name: "LogoContent", type: "string", value: LogoContent, nullable: true}, {name: "LogoExtension", type: "string", value: LogoExtension, nullable: true}, {name: "IsUnitCancel", type: "bool", value: IsUnitCancel, nullable: true}, {name: "JournalParent", type: "bool", value: JournalParent, nullable: true}, {name: "ChangeFreeJournal", type: "bool", value: ChangeFreeJournal, nullable: true}, {name: "ID_UnitParent", type: "int", value: ID_UnitParent, nullable: true}, {name: "IsPostalAuthenticated", type: "bool", value: IsPostalAuthenticated, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "AddressDistrict", type: "string", value: AddressDistrict, nullable: true}, {name: "PostalDistrict", type: "string", value: PostalDistrict, nullable: true}, {name: "NewDisplayName", type: "string", value: NewDisplayName, nullable: true}, {name: "CompleteDisplayName", type: "string", value: CompleteDisplayName, nullable: true}, {name: "ID_PersonChangeName", type: "int", value: ID_PersonChangeName, nullable: true}, {name: "PersonChangeName", type: "string", value: PersonChangeName, nullable: true}, {name: "DateChangeName", type: "string", value: DateChangeName, nullable: true}, {name: "PropertyAgreementExtension", type: "string", value: PropertyAgreementExtension, nullable: true}, {name: "ID_TempFilePropertyAgreement", type: "string", value: ID_TempFilePropertyAgreement, nullable: true}, {name: "PropertyAgreementContent", type: "string", value: PropertyAgreementContent, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonAllUnitRegistrationMistake = function(ID_Login, ID_Unit, ID_ContactType, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllUnitRegistrationMistake", "PersonAllUnitRegistrationMistake", "personAllUnitRegistrationMistakeInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_ContactType", type: "string", value: ID_ContactType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonCatalogSummary = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/PersonCatalogSummary", "PersonCatalogSummary", "personCatalogSummaryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [{"paramName":"PersonCount","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.PersonAllCatalog = function(ID_Login, Name, City, RegistrationNumber, RegistrationNumberStartWith, Unit, Phone, Email, ID_OfferType, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllCatalog", "PersonAllCatalog", "personAllCatalogInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "Name", type: "string", value: Name, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "RegistrationNumberStartWith", type: "bool", value: RegistrationNumberStartWith, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "Phone", type: "string", value: Phone, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "ID_OfferType", type: "int", value: ID_OfferType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonDetailTelephonyLimit = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetailTelephonyLimit", "PersonDetailTelephonyLimit", "personDetailTelephonyLimitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"TelephonyLimit","paramType":"s:int"},{"paramName":"DataLimit","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.PersonUpdateTelephonyLimit = function(ID_Login, ID, TelephonyLimit, DataLimit, callback) {
  this.soapRequest("https://is.skaut.cz/PersonUpdateTelephonyLimit", "PersonUpdateTelephonyLimit", "personUpdateTelephonyLimitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "TelephonyLimit", type: "int", value: TelephonyLimit, nullable: true}, {name: "DataLimit", type: "int", value: DataLimit, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitDetailTelephonyLimit = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/UnitDetailTelephonyLimit", "UnitDetailTelephonyLimit", "unitDetailTelephonyLimitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"TelephonyLimit","paramType":"s:int"},{"paramName":"DataLimit","paramType":"s:int"},{"paramName":"DefaultCallLimit","paramType":"s:int"},{"paramName":"DefaultDataLimit","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.UnitTypeAllLimit = function(ID_Login, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTypeAllLimit", "UnitTypeAllLimit", "unitTypeAllLimitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitTypeUpdate = function(ID_Login, ID, DisplayName, Level, ContainsMembers, FreeAttachments, Note, Birdos, CommissionCount, CommissionDeadline, ID_Instance, CallLimit, DataLimit, callback) {
  this.soapRequest("https://is.skaut.cz/UnitTypeUpdate", "UnitTypeUpdate", "unitTypeUpdateInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Level", type: "int", value: Level, nullable: true}, {name: "ContainsMembers", type: "bool", value: ContainsMembers, nullable: true}, {name: "FreeAttachments", type: "int", value: FreeAttachments, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "Birdos", type: "string", value: Birdos, nullable: true}, {name: "CommissionCount", type: "int", value: CommissionCount, nullable: true}, {name: "CommissionDeadline", type: "int", value: CommissionDeadline, nullable: true}, {name: "ID_Instance", type: "string", value: ID_Instance, nullable: true}, {name: "CallLimit", type: "int", value: CallLimit, nullable: true}, {name: "DataLimit", type: "int", value: DataLimit, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.UnitUpdateTelephonyLimit = function(ID_Login, ID, TelephonyLimit, DataLimit, DefaultCallLimit, DefaultDataLimit, callback) {
  this.soapRequest("https://is.skaut.cz/UnitUpdateTelephonyLimit", "UnitUpdateTelephonyLimit", "unitTelephonyLimit", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "TelephonyLimit", type: "int", value: TelephonyLimit, nullable: true}, {name: "DataLimit", type: "int", value: DataLimit, nullable: true}, {name: "DefaultCallLimit", type: "int", value: DefaultCallLimit, nullable: true}, {name: "DefaultDataLimit", type: "int", value: DefaultDataLimit, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonAllIdentificationCode = function(ID_Login, IdentificationCode, IdentificationCodeStartsWith, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllIdentificationCode", "PersonAllIdentificationCode", "personAllIdentificationCodeInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}, {name: "IdentificationCodeStartsWith", type: "string", value: IdentificationCodeStartsWith, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.UnitAllRegistryBasic = function(ID_Login, ID_Application, Search, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/UnitAllRegistryBasic", "UnitAllRegistryBasic", "unitAllRegistryBasicInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "Search", type: "string", value: Search, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonUpdateAddress = function(ID_Login, ID, Street, City, Postcode, State, PostalFirstLine, PostalStreet, PostalCity, PostalPostcode, PostalState, callback) {
  this.soapRequest("https://is.skaut.cz/PersonUpdateAddress", "PersonUpdateAddress", "personUpdateAddressInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "PostalFirstLine", type: "string", value: PostalFirstLine, nullable: true}, {name: "PostalStreet", type: "string", value: PostalStreet, nullable: true}, {name: "PostalCity", type: "string", value: PostalCity, nullable: true}, {name: "PostalPostcode", type: "string", value: PostalPostcode, nullable: true}, {name: "PostalState", type: "string", value: PostalState, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonUpdateBasic = function(ID_Login, ID, ID_Sex, Birthday, FirstName, LastName, NickName, MaidenName, YearFrom, Street, City, Postcode, State, callback) {
  this.soapRequest("https://is.skaut.cz/PersonUpdateBasic", "PersonUpdateBasic", "personUpdateBasicInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "NickName", type: "string", value: NickName, nullable: true}, {name: "MaidenName", type: "string", value: MaidenName, nullable: true}, {name: "YearFrom", type: "int", value: YearFrom, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonAllEventCamp = function(ID_Login, ID_EventCamp, DisplayName, ID, IdentificationCode, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllEventCamp", "PersonAllEventCamp", "personAllEventCampInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_EventCamp", type: "int", value: ID_EventCamp, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "IdentificationCode", type: "string", value: IdentificationCode, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllEventCampMulti = function(ID_Login, ID_EventCamp, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllEventCampMulti", "PersonAllEventCampMulti", "personAllEventCampMultiInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_EventCamp", type: "int", value: ID_EventCamp, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.UnitAllCamp = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/UnitAllCamp", "UnitAllCamp", "unitAllCampInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllUstredi = function(ID_Login, ID_EventCongress, DisplayName, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllUstredi", "PersonAllUstredi", "personAllUstrediInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_EventCongress", type: "int", value: ID_EventCongress, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllPublic = function(ID_Login, FirstName, LastName, NickName, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllPublic", "PersonAllPublic", "personAllPublicInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "FirstName", type: "string", value: FirstName, nullable: true}, {name: "LastName", type: "string", value: LastName, nullable: true}, {name: "NickName", type: "string", value: NickName, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.AccountAll = function(ID_Login, ID_Application, ID_Unit, ID_Bank, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/AccountAll", "AccountAll", "accountAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_Bank", type: "int", value: ID_Bank, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.AccountDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/AccountDelete", "AccountDelete", "accountDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.AccountDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/AccountDetail", "AccountDetail", "accountDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"ID_Bank","paramType":"s:int"},{"paramName":"Bank","paramType":"s:string"},{"paramName":"AccountPrefix","paramType":"s:string"},{"paramName":"AccountNumber","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"IsMain","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.AccountInsert = function(ID_Login, ID, DisplayName, ID_Unit, Unit, ValidTo, ID_Bank, Bank, AccountPrefix, AccountNumber, Street, City, Postcode, Note, IsMain, callback) {
  this.soapRequest("https://is.skaut.cz/AccountInsert", "AccountInsert", "account", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Bank", type: "int", value: ID_Bank, nullable: true}, {name: "Bank", type: "string", value: Bank, nullable: true}, {name: "AccountPrefix", type: "string", value: AccountPrefix, nullable: true}, {name: "AccountNumber", type: "string", value: AccountNumber, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsMain", type: "bool", value: IsMain, nullable: false}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.AccountUpdate = function(ID_Login, ID, DisplayName, ID_Unit, Unit, ValidTo, ID_Bank, Bank, AccountPrefix, AccountNumber, Street, City, Postcode, Note, IsMain, callback) {
  this.soapRequest("https://is.skaut.cz/AccountUpdate", "AccountUpdate", "account", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Bank", type: "int", value: ID_Bank, nullable: true}, {name: "Bank", type: "string", value: Bank, nullable: true}, {name: "AccountPrefix", type: "string", value: AccountPrefix, nullable: true}, {name: "AccountNumber", type: "string", value: AccountNumber, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "IsMain", type: "bool", value: IsMain, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.AdvertisingCategoryAll = function(ID_Login, ID_Application, ID_Unit, ID_MeetingDate, ID_Sex, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingCategoryAll", "AdvertisingCategoryAll", "advertisingCategoryAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_MeetingDate", type: "int", value: ID_MeetingDate, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.AdvertisingCategoryDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingCategoryDelete", "AdvertisingCategoryDelete", "advertisingCategoryDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.AdvertisingCategoryDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingCategoryDetail", "AdvertisingCategoryDetail", "advertisingCategoryDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"AgeFrom","paramType":"s:int"},{"paramName":"AgeTo","paramType":"s:int"},{"paramName":"ID_Sex","paramType":"s:string"},{"paramName":"Sex","paramType":"s:string"},{"paramName":"ID_MeetingDate","paramType":"s:int"},{"paramName":"MeetingDate","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.AdvertisingCategoryInsert = function(ID_Login, ID, ID_Unit, Unit, AgeFrom, AgeTo, ID_Sex, Sex, ID_MeetingDate, MeetingDate, Note, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingCategoryInsert", "AdvertisingCategoryInsert", "advertisingCategory", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "AgeFrom", type: "int", value: AgeFrom, nullable: true}, {name: "AgeTo", type: "int", value: AgeTo, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}, {name: "Sex", type: "string", value: Sex, nullable: true}, {name: "ID_MeetingDate", type: "int", value: ID_MeetingDate, nullable: true}, {name: "MeetingDate", type: "string", value: MeetingDate, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.AdvertisingCategoryUpdate = function(ID_Login, ID, ID_Unit, Unit, AgeFrom, AgeTo, ID_Sex, Sex, ID_MeetingDate, MeetingDate, Note, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingCategoryUpdate", "AdvertisingCategoryUpdate", "advertisingCategory", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "AgeFrom", type: "int", value: AgeFrom, nullable: true}, {name: "AgeTo", type: "int", value: AgeTo, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}, {name: "Sex", type: "string", value: Sex, nullable: true}, {name: "ID_MeetingDate", type: "int", value: ID_MeetingDate, nullable: true}, {name: "MeetingDate", type: "string", value: MeetingDate, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.AdvertisingDetail = function(ID_Login, ID_Application, ID_Unit, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingDetail", "AdvertisingDetail", "advertisingDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.AdvertisingSummary = function(ID_Login, ID_Application, ID_Unit, IncludeChildUnits, ID_Realty, Distance, GpsLatitude, GpsLongitude, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingSummary", "AdvertisingSummary", "advertisingSummaryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "IncludeChildUnits", type: "bool", value: IncludeChildUnits, nullable: true}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Distance", type: "int", value: Distance, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.AdvertisingUpdate = function(ID_Login, ID, ID_Unit, Unit, Note, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingUpdate", "AdvertisingUpdate", "advertising", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.AlignmentAll = function(ID_Login, ID_Application, ID_Unit, ID_AlignmentType, IsValid, callback) {
  this.soapRequest("https://is.skaut.cz/AlignmentAll", "AlignmentAll", "alignmentAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_AlignmentType", type: "int", value: ID_AlignmentType, nullable: true}, {name: "IsValid", type: "bool", value: IsValid, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.AdvertisingCategoryAllOccupation = function(ID_Login, ID_Application, ID_Occupation, ID_MeetingDate, ID_Sex, callback) {
  this.soapRequest("https://is.skaut.cz/AdvertisingCategoryAllOccupation", "AdvertisingCategoryAllOccupation", "advertisingCategoryAllOccupationInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: false}, {name: "ID_MeetingDate", type: "int", value: ID_MeetingDate, nullable: true}, {name: "ID_Sex", type: "string", value: ID_Sex, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.CitizenshipAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/CitizenshipAll", "CitizenshipAll", "citizenshipAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.EducatationSeminaryInsertEventEducation = function(ID_Login, ID_EventEducation, callback) {
  this.soapRequest("https://is.skaut.cz/EducatationSeminaryInsertEventEducation", "EducatationSeminaryInsertEventEducation", "educatationSeminaryInsertEventEducationInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_EventEducation", type: "int", value: ID_EventEducation, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.FunctionDetailAgreementDownload = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionDetailAgreementDownload", "FunctionDetailAgreementDownload", "functionDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"AgreementExtension","paramType":"s:string"},{"paramName":"AgreementContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.FunctionDetailAgreementTemplate = function(ID_Login, ID, ID_FunctionType, CityText, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionDetailAgreementTemplate", "FunctionDetailAgreementTemplate", "functionDetailAgreementTemplateInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: false}, {name: "CityText", type: "string", value: CityText, nullable: true}], [{"paramName":"Unit","paramType":"s:string"},{"paramName":"UnitStreet","paramType":"s:string"},{"paramName":"UnitCity","paramType":"s:string"},{"paramName":"UnitPostcode","paramType":"s:string"},{"paramName":"UnitRegistrationNumber","paramType":"s:string"},{"paramName":"UnitIC","paramType":"s:string"},{"paramName":"PersonFirstname","paramType":"s:string"},{"paramName":"PersonLastname","paramType":"s:string"},{"paramName":"PersonBirthdate","paramType":"s:dateTime"},{"paramName":"BirthDistrict","paramType":"s:string"},{"paramName":"BirthRegion","paramType":"s:string"},{"paramName":"BirthName","paramType":"s:string"},{"paramName":"BirthCity","paramType":"s:string"},{"paramName":"ID_Citizenship","paramType":"s:string"},{"paramName":"Citizenship","paramType":"s:string"},{"paramName":"PersonIdentificationCode","paramType":"s:string"},{"paramName":"PersonStreet","paramType":"s:string"},{"paramName":"PersonCity","paramType":"s:string"},{"paramName":"PersonPostcode","paramType":"s:string"},{"paramName":"UserName","paramType":"s:string"},{"paramName":"SecurityCode","paramType":"s:string"},{"paramName":"Function","paramType":"s:string"},{"paramName":"FunctionText","paramType":"s:string"},{"paramName":"CityText","paramType":"s:string"},{"paramName":"Date","paramType":"s:dateTime"},{"paramName":"DegreeInFrontOf","paramType":"s:string"},{"paramName":"DegreeBehind","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.FunctionUpdateAgreementConfirm = function(ID_Login, ID, ValidFrom, ValidTo, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, ID_Role, IsDeleteRole, Specification, ID_TempFile, AgreementExtension, AgreementConfirmed, AgreementNeeded, AgreementCanUpload, AgreementCanConfirm, AgreementCanView, Code, Number, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionUpdateAgreementConfirm", "FunctionUpdateAgreementConfirm", "function", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "IsDeleteRole", type: "bool", value: IsDeleteRole, nullable: true}, {name: "Specification", type: "string", value: Specification, nullable: true}, {name: "ID_TempFile", type: "string", value: ID_TempFile, nullable: true}, {name: "AgreementExtension", type: "string", value: AgreementExtension, nullable: true}, {name: "AgreementConfirmed", type: "string", value: AgreementConfirmed, nullable: true}, {name: "AgreementNeeded", type: "bool", value: AgreementNeeded, nullable: true}, {name: "AgreementCanUpload", type: "bool", value: AgreementCanUpload, nullable: true}, {name: "AgreementCanConfirm", type: "bool", value: AgreementCanConfirm, nullable: true}, {name: "AgreementCanView", type: "bool", value: AgreementCanView, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "Number", type: "string", value: Number, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.FunctionUpdateAgreement = function(ID_Login, ID, ValidFrom, ValidTo, ID_Person, ID_Unit, ID_FunctionType, ID_FunctionReason, ID_Role, IsDeleteRole, Specification, ID_TempFile, AgreementExtension, AgreementConfirmed, AgreementNeeded, AgreementCanUpload, AgreementCanConfirm, AgreementCanView, Code, Number, callback) {
  this.soapRequest("https://is.skaut.cz/FunctionUpdateAgreement", "FunctionUpdateAgreement", "function", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_FunctionType", type: "int", value: ID_FunctionType, nullable: true}, {name: "ID_FunctionReason", type: "string", value: ID_FunctionReason, nullable: true}, {name: "ID_Role", type: "int", value: ID_Role, nullable: true}, {name: "IsDeleteRole", type: "bool", value: IsDeleteRole, nullable: true}, {name: "Specification", type: "string", value: Specification, nullable: true}, {name: "ID_TempFile", type: "string", value: ID_TempFile, nullable: true}, {name: "AgreementExtension", type: "string", value: AgreementExtension, nullable: true}, {name: "AgreementConfirmed", type: "string", value: AgreementConfirmed, nullable: true}, {name: "AgreementNeeded", type: "bool", value: AgreementNeeded, nullable: true}, {name: "AgreementCanUpload", type: "bool", value: AgreementCanUpload, nullable: true}, {name: "AgreementCanConfirm", type: "bool", value: AgreementCanConfirm, nullable: true}, {name: "AgreementCanView", type: "bool", value: AgreementCanView, nullable: true}, {name: "Code", type: "string", value: Code, nullable: true}, {name: "Number", type: "string", value: Number, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceAllUnit = function(ID_Login, ID_Unit, ID, DisplayName, ID_MemberCardInvoiceState, DateGeneratingFrom, DateGeneratingTo, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceAllUnit", "MemberCardInvoiceAllUnit", "memberCardInvoiceAllUnitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_MemberCardInvoiceState", type: "string", value: ID_MemberCardInvoiceState, nullable: true}, {name: "DateGeneratingFrom", type: "string", value: DateGeneratingFrom, nullable: true}, {name: "DateGeneratingTo", type: "string", value: DateGeneratingTo, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceAllXml = function(ID_Login, ID_Unit, ID, DisplayName, ID_MemberCardInvoiceGenerate, ID_MemberCardInvoiceState, DateGeneratingFrom, DateGeneratingTo, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceAllXml", "MemberCardInvoiceAllXml", "memberCardInvoiceAllXmlInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_MemberCardInvoiceGenerate", type: "int", value: ID_MemberCardInvoiceGenerate, nullable: true}, {name: "ID_MemberCardInvoiceState", type: "string", value: ID_MemberCardInvoiceState, nullable: true}, {name: "DateGeneratingFrom", type: "string", value: DateGeneratingFrom, nullable: true}, {name: "DateGeneratingTo", type: "string", value: DateGeneratingTo, nullable: true}], [{"paramName":"Xml","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceDetailDownloadPdf = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceDetailDownloadPdf", "MemberCardInvoiceDetailDownloadPdf", "memberCardInvoiceDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"Content","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceUpdate = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Street, City, Postcode, State, IC, DIC, DisplayName, Sequence, Maturity, DateGenerating, Price, ID_MemberCardInvoiceGenerate, ID_MemberCardInvoiceState, MemberCardInvoiceState, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceUpdate", "MemberCardInvoiceUpdate", "memberCardInvoice", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "DIC", type: "string", value: DIC, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Sequence", type: "int", value: Sequence, nullable: true}, {name: "Maturity", type: "string", value: Maturity, nullable: true}, {name: "DateGenerating", type: "string", value: DateGenerating, nullable: true}, {name: "Price", type: "float", value: Price, nullable: true}, {name: "ID_MemberCardInvoiceGenerate", type: "int", value: ID_MemberCardInvoiceGenerate, nullable: true}, {name: "ID_MemberCardInvoiceState", type: "string", value: ID_MemberCardInvoiceState, nullable: true}, {name: "MemberCardInvoiceState", type: "string", value: MemberCardInvoiceState, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceUpdateSend = function(ID_Login, ID, ID_Unit, Unit, RegistrationNumber, Street, City, Postcode, State, IC, DIC, DisplayName, Sequence, Maturity, DateGenerating, Price, ID_MemberCardInvoiceGenerate, ID_MemberCardInvoiceState, MemberCardInvoiceState, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceUpdateSend", "MemberCardInvoiceUpdateSend", "memberCardInvoice", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "State", type: "string", value: State, nullable: true}, {name: "IC", type: "string", value: IC, nullable: true}, {name: "DIC", type: "string", value: DIC, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Sequence", type: "int", value: Sequence, nullable: true}, {name: "Maturity", type: "string", value: Maturity, nullable: true}, {name: "DateGenerating", type: "string", value: DateGenerating, nullable: true}, {name: "Price", type: "float", value: Price, nullable: true}, {name: "ID_MemberCardInvoiceGenerate", type: "int", value: ID_MemberCardInvoiceGenerate, nullable: true}, {name: "ID_MemberCardInvoiceState", type: "string", value: ID_MemberCardInvoiceState, nullable: true}, {name: "MemberCardInvoiceState", type: "string", value: MemberCardInvoiceState, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.OccupationAllPositions = function(ID_Login, ID_Application, GpsLatitudeStart, GpsLongitudeStart, GpsLatitudeEnd, GpsLongitudeEnd, ID_Unit, IncludeChildUnits, Publish, ID_RealtyType, AdvertisingCategories, GpsLatitude, GpsLongitude, Distance, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationAllPositions", "OccupationAllPositions", "occupationAllPositionsInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "GpsLatitudeStart", type: "string", value: GpsLatitudeStart, nullable: false}, {name: "GpsLongitudeStart", type: "string", value: GpsLongitudeStart, nullable: false}, {name: "GpsLatitudeEnd", type: "string", value: GpsLatitudeEnd, nullable: false}, {name: "GpsLongitudeEnd", type: "string", value: GpsLongitudeEnd, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "IncludeChildUnits", type: "bool", value: IncludeChildUnits, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "AdvertisingCategories", type: "string", value: AdvertisingCategories, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Distance", type: "int", value: Distance, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationAllUnit = function(ID_Login, ID_Unit, IsActive, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationAllUnit", "OccupationAllUnit", "occupationAllUnitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationDeleteRealty = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationDeleteRealty", "OccupationDeleteRealty", "occupationDeleteRealtyInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.OccupationAllGrouped = function(ID, ID_Unit, IncludeChildUnits, Publish, ID_RealtyType, AdvertisingCategories, GpsLatitude, GpsLongitude, Distance, ID_Login, ID_Application, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationAllGrouped", "OccupationAllGrouped", "occupationAllGroupedInput", [{name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "IncludeChildUnits", type: "bool", value: IncludeChildUnits, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "AdvertisingCategories", type: "string", value: AdvertisingCategories, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Distance", type: "int", value: Distance, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationDetailRealtyDownload = function(ID_Login, ID, ID_Unit, ID_Realty, Publish, Note, ID_RealtyType, RealtyType, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationDetailRealtyDownload", "OccupationDetailRealtyDownload", "occupation", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"RequirementExtension","paramType":"s:string"},{"paramName":"RequirementFileContent","paramType":"s:base64Binary"},{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoFileContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.OccupationDetailRealty = function(ID_Login, ID, ID_Application, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationDetailRealty", "OccupationDetailRealty", "occupationDetailRealtyInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"ID_Realty","paramType":"s:int"},{"paramName":"Realty","paramType":"s:string"},{"paramName":"ID_RealtyType","paramType":"s:int"},{"paramName":"RealtyType","paramType":"s:string"},{"paramName":"Publish","paramType":"s:boolean"},{"paramName":"Note","paramType":"s:string"},{"paramName":"IsBorrowable","paramType":"s:boolean"},{"paramName":"ID_OccupationRent","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Capacity","paramType":"s:int"},{"paramName":"CapacityNote","paramType":"s:string"},{"paramName":"Person","paramType":"s:string"},{"paramName":"Email","paramType":"s:string"},{"paramName":"Phone","paramType":"s:string"},{"paramName":"ContactNote","paramType":"s:string"},{"paramName":"Web","paramType":"s:string"},{"paramName":"RequirementExtension","paramType":"s:string"},{"paramName":"Requirements","paramType":"s:string"},{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"Fotogallery","paramType":"s:string"},{"paramName":"IsBookable","paramType":"s:boolean"},{"paramName":"AccommodationNote","paramType":"s:string"},{"paramName":"BorrowableForeign","paramType":"s:boolean"},{"paramName":"ID_RealtyCollection","paramType":"s:int"},{"paramName":"RealtyCollection","paramType":"s:string"},{"paramName":"PointsOfInterest","paramType":"s:string"},{"paramName":"TransportDescription","paramType":"s:string"},{"paramName":"ID_OwnerType","paramType":"s:string"},{"paramName":"OwnerType","paramType":"s:string"},{"paramName":"AllEquipment","paramType":"s:string"},{"paramName":"AllLanguages","paramType":"s:string"},{"paramName":"AllTags","paramType":"s:string"},{"paramName":"AllLocations","paramType":"s:string"},{"paramName":"AllTransport","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.OccupationEquipmentAll = function(ID_Login, ID_Application, ID, ID_RealtyType, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationEquipmentAll", "OccupationEquipmentAll", "occupationEquipmentAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentAllBorrowable = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentAllBorrowable", "OccupationRentAllBorrowable", "occupationRentAllBorrowableInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentAllPublic = function(ID_Application, ID_Login, OccupationLanguageList, BasePrice, ScoutPrice, ChildPrice, PriceTypeList, ID_Occupation, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentAllPublic", "OccupationRentAllPublic", "occupationRentAllPublicInput", [{name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "OccupationLanguageList", type: "string", value: OccupationLanguageList, nullable: true}, {name: "BasePrice", type: "float", value: BasePrice, nullable: true}, {name: "ScoutPrice", type: "float", value: ScoutPrice, nullable: true}, {name: "ChildPrice", type: "float", value: ChildPrice, nullable: true}, {name: "PriceTypeList", type: "string", value: PriceTypeList, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentDetailPublic = function(ID_Application, ID, ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentDetailPublic", "OccupationRentDetailPublic", "occupationRentDetailPublicInput", [{name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Login", type: "string", value: ID_Login, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Email","paramType":"s:string"},{"paramName":"Phone","paramType":"s:string"},{"paramName":"Web","paramType":"s:string"},{"paramName":"Fotogallery","paramType":"s:string"},{"paramName":"Capacity","paramType":"s:int"},{"paramName":"CapacityNote","paramType":"s:string"},{"paramName":"AccommodationNote","paramType":"s:string"},{"paramName":"BorrowableForeign","paramType":"s:boolean"},{"paramName":"OccupationRentPriceType","paramType":"s:string"},{"paramName":"BasePrice","paramType":"s:decimal"},{"paramName":"ScoutPrice","paramType":"s:decimal"},{"paramName":"ChildPrice","paramType":"s:decimal"},{"paramName":"PriceNote","paramType":"s:string"},{"paramName":"Equipment","paramType":"s:string"},{"paramName":"ID_Occupation","paramType":"s:int"},{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.OccupationRentReservationAllCalendar = function(ID_Login, ID_Application, ID, ShowAdminView, CalendarName, CalendarDescription, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationAllCalendar", "OccupationRentReservationAllCalendar", "occupationRentReservationAllCalendarInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ShowAdminView", type: "bool", value: ShowAdminView, nullable: true}, {name: "CalendarName", type: "string", value: CalendarName, nullable: true}, {name: "CalendarDescription", type: "string", value: CalendarDescription, nullable: true}], [{"paramName":"Items","paramType":"tns:ArrayOfOccupationRentReservationAllCalendarOutputItem"},{"paramName":"CalendarICS","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.OccupationRentReservationAllOverview = function(ID_Login, ID_OccupationRent, ID, ID_User, ID_OccupationRentReservationState, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationAllOverview", "OccupationRentReservationAllOverview", "occupationRentReservationAllOverviewInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_OccupationRent", type: "int", value: ID_OccupationRent, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "ID_OccupationRentReservationState", type: "string", value: ID_OccupationRentReservationState, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentReservationAll = function(ID_Login, ID_OccupationRent, ID, ID_User, ID_OccupationRentReservationState, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationAll", "OccupationRentReservationAll", "occupationRentReservationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_OccupationRent", type: "int", value: ID_OccupationRent, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "ID_OccupationRentReservationState", type: "string", value: ID_OccupationRentReservationState, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentReservationDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationDelete", "OccupationRentReservationDelete", "occupationRentReservationDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.OccupationRentReservationDetail = function(ID_Application, ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationDetail", "OccupationRentReservationDetail", "occupationRentReservationDetailInput", [{name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_User","paramType":"s:int"},{"paramName":"ID_OccupationRentReservationState","paramType":"s:string"},{"paramName":"ID_Occupation","paramType":"s:int"},{"paramName":"OccupationRentReservationState","paramType":"s:string"},{"paramName":"ID_OccupationRent","paramType":"s:int"},{"paramName":"OccupationRent","paramType":"s:string"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"EstimatedStart","paramType":"s:dateTime"},{"paramName":"EstimatedEnd","paramType":"s:dateTime"},{"paramName":"RealStart","paramType":"s:dateTime"},{"paramName":"RealEnd","paramType":"s:dateTime"},{"paramName":"EstimatedPersonCount","paramType":"s:int"},{"paramName":"ContactPerson","paramType":"s:string"},{"paramName":"ContactPhone","paramType":"s:string"},{"paramName":"ContactMail","paramType":"s:string"},{"paramName":"RejectionReason","paramType":"s:string"},{"paramName":"LastUpdate","paramType":"s:dateTime"},{"paramName":"Note","paramType":"s:string"},{"paramName":"Created","paramType":"s:dateTime"}], false, callback);
}
OrganizationUnit.prototype.OccupationRentReservationInsert = function(ID_Login, ID, ID_User, ID_OccupationRentReservationState, ID_Occupation, OccupationRentReservationState, ID_OccupationRent, OccupationRent, ID_Unit, Unit, RegistrationNumber, EstimatedStart, EstimatedEnd, RealStart, RealEnd, EstimatedPersonCount, ContactPerson, ContactPhone, ContactMail, RejectionReason, LastUpdate, Note, Created, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationInsert", "OccupationRentReservationInsert", "occupationRentReservation", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "ID_OccupationRentReservationState", type: "string", value: ID_OccupationRentReservationState, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "OccupationRentReservationState", type: "string", value: OccupationRentReservationState, nullable: true}, {name: "ID_OccupationRent", type: "int", value: ID_OccupationRent, nullable: true}, {name: "OccupationRent", type: "string", value: OccupationRent, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "EstimatedStart", type: "string", value: EstimatedStart, nullable: true}, {name: "EstimatedEnd", type: "string", value: EstimatedEnd, nullable: true}, {name: "RealStart", type: "string", value: RealStart, nullable: true}, {name: "RealEnd", type: "string", value: RealEnd, nullable: true}, {name: "EstimatedPersonCount", type: "int", value: EstimatedPersonCount, nullable: true}, {name: "ContactPerson", type: "string", value: ContactPerson, nullable: true}, {name: "ContactPhone", type: "string", value: ContactPhone, nullable: true}, {name: "ContactMail", type: "string", value: ContactMail, nullable: true}, {name: "RejectionReason", type: "string", value: RejectionReason, nullable: true}, {name: "LastUpdate", type: "string", value: LastUpdate, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "Created", type: "string", value: Created, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationRentReservationUpdate = function(ID_Login, ID, ID_User, ID_OccupationRentReservationState, ID_Occupation, OccupationRentReservationState, ID_OccupationRent, OccupationRent, ID_Unit, Unit, RegistrationNumber, EstimatedStart, EstimatedEnd, RealStart, RealEnd, EstimatedPersonCount, ContactPerson, ContactPhone, ContactMail, RejectionReason, LastUpdate, Note, Created, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationUpdate", "OccupationRentReservationUpdate", "occupationRentReservation", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "ID_OccupationRentReservationState", type: "string", value: ID_OccupationRentReservationState, nullable: true}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "OccupationRentReservationState", type: "string", value: OccupationRentReservationState, nullable: true}, {name: "ID_OccupationRent", type: "int", value: ID_OccupationRent, nullable: true}, {name: "OccupationRent", type: "string", value: OccupationRent, nullable: true}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "RegistrationNumber", type: "string", value: RegistrationNumber, nullable: true}, {name: "EstimatedStart", type: "string", value: EstimatedStart, nullable: true}, {name: "EstimatedEnd", type: "string", value: EstimatedEnd, nullable: true}, {name: "RealStart", type: "string", value: RealStart, nullable: true}, {name: "RealEnd", type: "string", value: RealEnd, nullable: true}, {name: "EstimatedPersonCount", type: "int", value: EstimatedPersonCount, nullable: true}, {name: "ContactPerson", type: "string", value: ContactPerson, nullable: true}, {name: "ContactPhone", type: "string", value: ContactPhone, nullable: true}, {name: "ContactMail", type: "string", value: ContactMail, nullable: true}, {name: "RejectionReason", type: "string", value: RejectionReason, nullable: true}, {name: "LastUpdate", type: "string", value: LastUpdate, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "Created", type: "string", value: Created, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.OccupationRentReservationUpdateConfirm = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationUpdateConfirm", "OccupationRentReservationUpdateConfirm", "occupationRentReservationUpdateConfirmInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.OccupationRentReservationUpdateReject = function(ID_Login, ID, RejectionReason, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentReservationUpdateReject", "OccupationRentReservationUpdateReject", "occupationRentReservationUpdateRejectInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "RejectionReason", type: "string", value: RejectionReason, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.OccupationUpdateRealty = function(ID, Publish, Note, ID_Login, IsBorrowable, DisplayName, Person, Email, Phone, Web, Fotogallery, ContactNote, Requirements, Capacity, CapacityNote, AccommodationNote, BorrowableForeign, IsBookable, ID_TempFilePhotoExtension, ID_TempFileRequirementExtension, Tags, Equipment, Languages, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationUpdateRealty", "OccupationUpdateRealty", "occupationUpdateRealtyInput", [{name: "ID", type: "int", value: ID, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "IsBorrowable", type: "bool", value: IsBorrowable, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "Phone", type: "string", value: Phone, nullable: true}, {name: "Web", type: "string", value: Web, nullable: true}, {name: "Fotogallery", type: "string", value: Fotogallery, nullable: true}, {name: "ContactNote", type: "string", value: ContactNote, nullable: true}, {name: "Requirements", type: "string", value: Requirements, nullable: true}, {name: "Capacity", type: "int", value: Capacity, nullable: true}, {name: "CapacityNote", type: "string", value: CapacityNote, nullable: true}, {name: "AccommodationNote", type: "string", value: AccommodationNote, nullable: true}, {name: "BorrowableForeign", type: "bool", value: BorrowableForeign, nullable: true}, {name: "IsBookable", type: "bool", value: IsBookable, nullable: true}, {name: "ID_TempFilePhotoExtension", type: "string", value: ID_TempFilePhotoExtension, nullable: true}, {name: "ID_TempFileRequirementExtension", type: "string", value: ID_TempFileRequirementExtension, nullable: true}, {name: "Tags", type: "string", value: Tags, nullable: true}, {name: "Equipment", type: "string", value: Equipment, nullable: true}, {name: "Languages", type: "string", value: Languages, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationInsertRealty = function(ID_Unit, ID_Realty, ID_RealtyType, Publish, Note, ID_Login, IsBorrowable, DisplayName, Person, Email, Phone, Web, Fotogallery, ContactNote, Requirements, Capacity, CapacityNote, AccommodationNote, BorrowableForeign, IsBookable, ID_TempFilePhotoExtension, ID_TempFileRequirementExtension, Tags, Equipment, Languages, ID_OccupationRentPriceType, BasePrice, ScoutPrice, ChildPrice, PriceNote, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationInsertRealty", "OccupationInsertRealty", "occupationInsertRealtyInput", [{name: "ID_Unit", type: "int", value: ID_Unit, nullable: false}, {name: "ID_Realty", type: "int", value: ID_Realty, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "Publish", type: "bool", value: Publish, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "IsBorrowable", type: "bool", value: IsBorrowable, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Email", type: "string", value: Email, nullable: true}, {name: "Phone", type: "string", value: Phone, nullable: true}, {name: "Web", type: "string", value: Web, nullable: true}, {name: "Fotogallery", type: "string", value: Fotogallery, nullable: true}, {name: "ContactNote", type: "string", value: ContactNote, nullable: true}, {name: "Requirements", type: "string", value: Requirements, nullable: true}, {name: "Capacity", type: "int", value: Capacity, nullable: true}, {name: "CapacityNote", type: "string", value: CapacityNote, nullable: true}, {name: "AccommodationNote", type: "string", value: AccommodationNote, nullable: true}, {name: "BorrowableForeign", type: "bool", value: BorrowableForeign, nullable: true}, {name: "IsBookable", type: "bool", value: IsBookable, nullable: true}, {name: "ID_TempFilePhotoExtension", type: "string", value: ID_TempFilePhotoExtension, nullable: true}, {name: "ID_TempFileRequirementExtension", type: "string", value: ID_TempFileRequirementExtension, nullable: true}, {name: "Tags", type: "string", value: Tags, nullable: true}, {name: "Equipment", type: "string", value: Equipment, nullable: true}, {name: "Languages", type: "string", value: Languages, nullable: true}, {name: "ID_OccupationRentPriceType", type: "string", value: ID_OccupationRentPriceType, nullable: true}, {name: "BasePrice", type: "int", value: BasePrice, nullable: true}, {name: "ScoutPrice", type: "int", value: ScoutPrice, nullable: true}, {name: "ChildPrice", type: "int", value: ChildPrice, nullable: true}, {name: "PriceNote", type: "string", value: PriceNote, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationLanguageAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationLanguageAll", "OccupationLanguageAll", "occupationLanguageAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentAll = function(ID_Login, ID_Occupation, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentAll", "OccupationRentAll", "occupationRentAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentDetail", "OccupationRentDetail", "occupationRentDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.OccupationRentEquipmentAll = function(ID_Login, ID_Occupation, ID, ID_OccupationEquipment, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentEquipmentAll", "OccupationRentEquipmentAll", "occupationRentEquipmentAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_OccupationEquipment", type: "int", value: ID_OccupationEquipment, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentInsert = function() {
  this.soapRequest("https://is.skaut.cz/OccupationRentInsert", "OccupationRentInsert", "occupationRent", [], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationRentLanguageAll = function(ID_Login, ID_Occupation, ID, ID_OccupationLanguage, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentLanguageAll", "OccupationRentLanguageAll", "occupationRentLanguageAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_OccupationLanguage", type: "string", value: ID_OccupationLanguage, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentPriceAll = function(ID_Login, ID_Occupation, ID, ID_OccupationRentPriceType, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentPriceAll", "OccupationRentPriceAll", "occupationRentPriceAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_OccupationRentPriceType", type: "string", value: ID_OccupationRentPriceType, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentPriceDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentPriceDelete", "OccupationRentPriceDelete", "occupationRentPriceDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.OccupationRentPriceDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentPriceDetail", "OccupationRentPriceDetail", "occupationRentPriceDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Occupation","paramType":"s:int"},{"paramName":"ID_OccupationRent","paramType":"s:int"},{"paramName":"OccupationRent","paramType":"s:string"},{"paramName":"ID_OccupationRentPriceType","paramType":"s:string"},{"paramName":"OccupationRentPriceType","paramType":"s:string"},{"paramName":"BasePrice","paramType":"s:int"},{"paramName":"PriceNote","paramType":"s:string"},{"paramName":"ScoutPrice","paramType":"s:int"},{"paramName":"ChildPrice","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationRentPriceInsert = function(ID_Login, ID, ID_Occupation, ID_OccupationRent, OccupationRent, ID_OccupationRentPriceType, OccupationRentPriceType, BasePrice, PriceNote, ScoutPrice, ChildPrice, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentPriceInsert", "OccupationRentPriceInsert", "occupationRentPrice", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID_OccupationRent", type: "int", value: ID_OccupationRent, nullable: true}, {name: "OccupationRent", type: "string", value: OccupationRent, nullable: true}, {name: "ID_OccupationRentPriceType", type: "string", value: ID_OccupationRentPriceType, nullable: true}, {name: "OccupationRentPriceType", type: "string", value: OccupationRentPriceType, nullable: true}, {name: "BasePrice", type: "int", value: BasePrice, nullable: true}, {name: "PriceNote", type: "string", value: PriceNote, nullable: true}, {name: "ScoutPrice", type: "int", value: ScoutPrice, nullable: true}, {name: "ChildPrice", type: "int", value: ChildPrice, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.OccupationRentPriceTypeAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentPriceTypeAll", "OccupationRentPriceTypeAll", "occupationRentPriceTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentPriceUpdate = function(ID_Login, ID, ID_Occupation, ID_OccupationRent, OccupationRent, ID_OccupationRentPriceType, OccupationRentPriceType, BasePrice, PriceNote, ScoutPrice, ChildPrice, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentPriceUpdate", "OccupationRentPriceUpdate", "occupationRentPrice", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID_OccupationRent", type: "int", value: ID_OccupationRent, nullable: true}, {name: "OccupationRent", type: "string", value: OccupationRent, nullable: true}, {name: "ID_OccupationRentPriceType", type: "string", value: ID_OccupationRentPriceType, nullable: true}, {name: "OccupationRentPriceType", type: "string", value: OccupationRentPriceType, nullable: true}, {name: "BasePrice", type: "int", value: BasePrice, nullable: true}, {name: "PriceNote", type: "string", value: PriceNote, nullable: true}, {name: "ScoutPrice", type: "int", value: ScoutPrice, nullable: true}, {name: "ChildPrice", type: "int", value: ChildPrice, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.OccupationRentTagAll = function(ID_Login, ID_Occupation, ID, ID_OccupationTag, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationRentTagAll", "OccupationRentTagAll", "occupationRentTagAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Occupation", type: "int", value: ID_Occupation, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_OccupationTag", type: "int", value: ID_OccupationTag, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationRentUpdate = function() {
  this.soapRequest("https://is.skaut.cz/OccupationRentUpdate", "OccupationRentUpdate", "occupationRent", [], [], false, callback);
}
OrganizationUnit.prototype.OccupationTagAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationTagAll", "OccupationTagAll", "occupationTagAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.QualificationAllNew = function(ID_Login, From, To, ID_QualificationTypeList, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationAllNew", "QualificationAllNew", "qualificationAllNewInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "From", type: "string", value: From, nullable: true}, {name: "To", type: "string", value: To, nullable: true}, {name: "ID_QualificationTypeList", type: "string", value: ID_QualificationTypeList, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.QualificationTypeAllList = function(ID_Login, ID_QualificationTypeList, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationTypeAllList", "QualificationTypeAllList", "qualificationTypeAllListInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_QualificationTypeList", type: "string", value: ID_QualificationTypeList, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyAllRealtyTypeCountPublic = function(ID_Login, ID_Application, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyAllRealtyTypeCountPublic", "RealtyAllRealtyTypeCountPublic", "realtyAllRealtyCollectionInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionGroupByPosition = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionGroupByPosition", "RealtyCollectionGroupByPosition", "realtyCollectionGroupByPositionInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionAllBorrowable = function(ID_Application, ID_Login, DisplayName, GpsLatitude, GpsLongitude, Distance, RegionList, DistrictList, City, Unit, OwnerTypeList, RealtyTypeList, OccupationEquipmentList, RealtyCollectionLocationList, Price, PriceType, OccupationLanguageList, Date, Capacity, OccupationTagList, BorrowableForeign, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionAllBorrowable", "RealtyCollectionAllBorrowable", "realtyCollectionAllBorrowableInput", [{name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Distance", type: "int", value: Distance, nullable: true}, {name: "RegionList", type: "string", value: RegionList, nullable: true}, {name: "DistrictList", type: "string", value: DistrictList, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "OwnerTypeList", type: "string", value: OwnerTypeList, nullable: true}, {name: "RealtyTypeList", type: "string", value: RealtyTypeList, nullable: true}, {name: "OccupationEquipmentList", type: "string", value: OccupationEquipmentList, nullable: true}, {name: "RealtyCollectionLocationList", type: "string", value: RealtyCollectionLocationList, nullable: true}, {name: "Price", type: "float", value: Price, nullable: true}, {name: "PriceType", type: "string", value: PriceType, nullable: true}, {name: "OccupationLanguageList", type: "string", value: OccupationLanguageList, nullable: true}, {name: "Date", type: "string", value: Date, nullable: true}, {name: "Capacity", type: "int", value: Capacity, nullable: true}, {name: "OccupationTagList", type: "string", value: OccupationTagList, nullable: true}, {name: "BorrowableForeign", type: "bool", value: BorrowableForeign, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionAll = function(ID_Login, ID_Unit, ID, ID_User, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionAll", "RealtyCollectionAll", "realtyCollectionAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionDetailBorrowable = function(ID_Application, ID, ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionDetailBorrowable", "RealtyCollectionDetailBorrowable", "realtyCollectionDetailBorrowableInput", [{name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Login", type: "string", value: ID_Login, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"UnitRegistrationNumber","paramType":"s:string"},{"paramName":"ID_Realty","paramType":"s:int"},{"paramName":"Realty","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"GpsLatitude","paramType":"s:double"},{"paramName":"GpsLongitude","paramType":"s:double"},{"paramName":"ID_Region","paramType":"s:int"},{"paramName":"Region","paramType":"s:string"},{"paramName":"ID_District","paramType":"s:int"},{"paramName":"District","paramType":"s:string"},{"paramName":"ID_OccupationRent","paramType":"s:int"},{"paramName":"ID_Occupation","paramType":"s:int"},{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionDetailPhoto = function(PhotoExtension, PhotoFileContent, ID_TempFilePhoto, FotogalleryUrl, ID_Login, ID, ID_Unit, Unit, UnitRegistrationNumber, Owner, ID_User, IsActive, DisplayName, Description, Web, GpsLatitude, GpsLongitude, HasAddress, Street, City, Postcode, District, TransportationMethods, TransportationMethodsText, TransportDescription, Locations, LocationsText, PointsOfInterest, Note, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionDetailPhoto", "RealtyCollectionDetailPhoto", "realtyCollectionInput", [{name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoFileContent", type: "string", value: PhotoFileContent, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "Unit", type: "string", value: Unit, nullable: true}, {name: "UnitRegistrationNumber", type: "string", value: UnitRegistrationNumber, nullable: true}, {name: "Owner", type: "string", value: Owner, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Web", type: "string", value: Web, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "HasAddress", type: "bool", value: HasAddress, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "District", type: "string", value: District, nullable: true}, {name: "TransportationMethods", type: "string", value: TransportationMethods, nullable: true}, {name: "TransportationMethodsText", type: "string", value: TransportationMethodsText, nullable: true}, {name: "TransportDescription", type: "string", value: TransportDescription, nullable: true}, {name: "Locations", type: "string", value: Locations, nullable: true}, {name: "LocationsText", type: "string", value: LocationsText, nullable: true}, {name: "PointsOfInterest", type: "string", value: PointsOfInterest, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoFileContent","paramType":"s:base64Binary"},{"paramName":"ID_TempFilePhoto","paramType":"s1:guid"},{"paramName":"FotogalleryUrl","paramType":"s:string"},{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"UnitRegistrationNumber","paramType":"s:string"},{"paramName":"Owner","paramType":"s:string"},{"paramName":"ID_User","paramType":"s:int"},{"paramName":"IsActive","paramType":"s:boolean"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Description","paramType":"s:string"},{"paramName":"Web","paramType":"s:string"},{"paramName":"GpsLatitude","paramType":"s:double"},{"paramName":"GpsLongitude","paramType":"s:double"},{"paramName":"HasAddress","paramType":"s:boolean"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"District","paramType":"s:string"},{"paramName":"TransportationMethods","paramType":"tns:ArrayOfString"},{"paramName":"TransportationMethodsText","paramType":"s:string"},{"paramName":"TransportDescription","paramType":"s:string"},{"paramName":"Locations","paramType":"tns:ArrayOfString"},{"paramName":"LocationsText","paramType":"s:string"},{"paramName":"PointsOfInterest","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionInsert = function(ID_TempFilePhoto, FotogalleryUrl, RealtyDisplayName, RealtyDescription, RealtyIsPower, ID_RealtyTempFilePhoto, RealtyFotogalleryUrl, ID_RealtyOwnerType, RealtyOwnerTypeNote, RealtyNote, ID_RealtyRegisterType, RealtyRegisterCode, ID_Login, ID_Unit, ID_User, DisplayName, Description, Web, HasAddress, Street, City, Postcode, District, GpsLatitude, GpsLongitude, TransportationMethods, TransportDescription, PointsOfInterest, Locations, Note, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionInsert", "RealtyCollectionInsert", "realtyCollection", [{name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "RealtyDisplayName", type: "string", value: RealtyDisplayName, nullable: true}, {name: "RealtyDescription", type: "string", value: RealtyDescription, nullable: true}, {name: "RealtyIsPower", type: "bool", value: RealtyIsPower, nullable: true}, {name: "ID_RealtyTempFilePhoto", type: "string", value: ID_RealtyTempFilePhoto, nullable: true}, {name: "RealtyFotogalleryUrl", type: "string", value: RealtyFotogalleryUrl, nullable: true}, {name: "ID_RealtyOwnerType", type: "string", value: ID_RealtyOwnerType, nullable: true}, {name: "RealtyOwnerTypeNote", type: "string", value: RealtyOwnerTypeNote, nullable: true}, {name: "RealtyNote", type: "string", value: RealtyNote, nullable: true}, {name: "ID_RealtyRegisterType", type: "string", value: ID_RealtyRegisterType, nullable: true}, {name: "RealtyRegisterCode", type: "string", value: RealtyRegisterCode, nullable: true}, {name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID_User", type: "int", value: ID_User, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Web", type: "string", value: Web, nullable: true}, {name: "HasAddress", type: "bool", value: HasAddress, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "District", type: "string", value: District, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "TransportationMethods", type: "string", value: TransportationMethods, nullable: true}, {name: "TransportDescription", type: "string", value: TransportDescription, nullable: true}, {name: "PointsOfInterest", type: "string", value: PointsOfInterest, nullable: true}, {name: "Locations", type: "string", value: Locations, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Realty","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RealtyDetailPhoto = function(ID_Login, ID, DisplayName, ID_RealtyType, RealtyType, Street, City, Postcode, GpsLatitude, GpsLongitude, Description, Note, ID_RealtyCollection, RealtyCollection, ID_OwnerType, OwnerType, OwnerTypeNote, IsPower, ValidTo, IsActive, PhotoExtension, PhotoFileContent, ID_TempFilePhoto, FotogalleryUrl, IsAddressAuthenticated, District, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDetailPhoto", "RealtyDetailPhoto", "realtyInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_RealtyType", type: "int", value: ID_RealtyType, nullable: true}, {name: "RealtyType", type: "string", value: RealtyType, nullable: true}, {name: "Street", type: "string", value: Street, nullable: true}, {name: "City", type: "string", value: City, nullable: true}, {name: "Postcode", type: "string", value: Postcode, nullable: true}, {name: "GpsLatitude", type: "string", value: GpsLatitude, nullable: true}, {name: "GpsLongitude", type: "string", value: GpsLongitude, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_OwnerType", type: "string", value: ID_OwnerType, nullable: true}, {name: "OwnerType", type: "string", value: OwnerType, nullable: true}, {name: "OwnerTypeNote", type: "string", value: OwnerTypeNote, nullable: true}, {name: "IsPower", type: "bool", value: IsPower, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "PhotoExtension", type: "string", value: PhotoExtension, nullable: true}, {name: "PhotoFileContent", type: "string", value: PhotoFileContent, nullable: true}, {name: "ID_TempFilePhoto", type: "string", value: ID_TempFilePhoto, nullable: true}, {name: "FotogalleryUrl", type: "string", value: FotogalleryUrl, nullable: true}, {name: "IsAddressAuthenticated", type: "bool", value: IsAddressAuthenticated, nullable: true}, {name: "District", type: "string", value: District, nullable: true}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_RealtyType","paramType":"s:int"},{"paramName":"RealtyType","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"GpsLatitude","paramType":"s:double"},{"paramName":"GpsLongitude","paramType":"s:double"},{"paramName":"Description","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"ID_RealtyCollection","paramType":"s:int"},{"paramName":"RealtyCollection","paramType":"s:string"},{"paramName":"ID_OwnerType","paramType":"s:string"},{"paramName":"OwnerType","paramType":"s:string"},{"paramName":"OwnerTypeNote","paramType":"s:string"},{"paramName":"IsPower","paramType":"s:boolean"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"IsActive","paramType":"s:boolean"},{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoFileContent","paramType":"s:base64Binary"},{"paramName":"ID_TempFilePhoto","paramType":"s1:guid"},{"paramName":"FotogalleryUrl","paramType":"s:string"},{"paramName":"IsAddressAuthenticated","paramType":"s:boolean"},{"paramName":"District","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.RealtyDocumentDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDocumentDelete", "RealtyDocumentDelete", "realtyDocumentDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.RealtyDocumentDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDocumentDetail", "RealtyDocumentDetail", "realtyDocumentDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"ID_User","paramType":"s:int"},{"paramName":"Location","paramType":"s:string"},{"paramName":"Origin","paramType":"s:string"},{"paramName":"Saved","paramType":"s:dateTime"},{"paramName":"IsPublic","paramType":"s:boolean"},{"paramName":"DownloadName","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"Size","paramType":"s:int"},{"paramName":"Hash","paramType":"s:base64Binary"},{"paramName":"ID_Realty","paramType":"s:int"},{"paramName":"Realty","paramType":"s:string"},{"paramName":"ID_Occupation","paramType":"s:int"},{"paramName":"Extension","paramType":"s:string"},{"paramName":"ID_TempFileDocument","paramType":"s1:guid"}], false, callback);
}
OrganizationUnit.prototype.RealtyDocumentDownload = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyDocumentDownload", "RealtyDocumentDownload", "realtyDocumenDownloadInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"FileName","paramType":"s:string"},{"paramName":"Extension","paramType":"s:string"},{"paramName":"FileContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.MemberCardAllMemberCardInvoice = function(ID_Login, ID_MemberCardInvoice, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardAllMemberCardInvoice", "MemberCardAllMemberCardInvoice", "memberCardAllMemberCardInvoiceInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_MemberCardInvoice", type: "int", value: ID_MemberCardInvoice, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardAllUnit = function(ID_Login, ID_Unit, ID, DisplayName, ID_MemberCardType, IncludeChild, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardAllUnit", "MemberCardAllUnit", "memberCardAllUnitInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_MemberCardType", type: "string", value: ID_MemberCardType, nullable: true}, {name: "IncludeChild", type: "bool", value: IncludeChild, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceAll = function(ID_Login, ID_Unit, ID, DisplayName, ID_MemberCardInvoiceGenerate, ID_MemberCardInvoiceState, DateGeneratingFrom, DateGeneratingTo, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceAll", "MemberCardInvoiceAll", "memberCardInvoiceAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Unit", type: "int", value: ID_Unit, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_MemberCardInvoiceGenerate", type: "int", value: ID_MemberCardInvoiceGenerate, nullable: true}, {name: "ID_MemberCardInvoiceState", type: "string", value: ID_MemberCardInvoiceState, nullable: true}, {name: "DateGeneratingFrom", type: "string", value: DateGeneratingFrom, nullable: true}, {name: "DateGeneratingTo", type: "string", value: DateGeneratingTo, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceDetail", "MemberCardInvoiceDetail", "memberCardInvoiceDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"RegistrationNumber","paramType":"s:string"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"State","paramType":"s:string"},{"paramName":"IC","paramType":"s:string"},{"paramName":"DIC","paramType":"s:string"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Sequence","paramType":"s:int"},{"paramName":"Maturity","paramType":"s:dateTime"},{"paramName":"DateGenerating","paramType":"s:dateTime"},{"paramName":"Price","paramType":"s:decimal"},{"paramName":"ID_MemberCardInvoiceGenerate","paramType":"s:int"},{"paramName":"ID_MemberCardInvoiceState","paramType":"s:string"},{"paramName":"MemberCardInvoiceState","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceGenerateAll = function(ID_Login, ID, ID_Person, ID_MemberCardInvoiceGenerateState, ID_Error, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceGenerateAll", "MemberCardInvoiceGenerateAll", "memberCardInvoiceGenerateAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID_MemberCardInvoiceGenerateState", type: "string", value: ID_MemberCardInvoiceGenerateState, nullable: true}, {name: "ID_Error", type: "int", value: ID_Error, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceGenerateInsert = function(ID_Login, ID, DateGenerating, ID_Person, Person, ID_MemberCardInvoiceGenerateState, MemberCardInvoiceGenerateState, ID_Error, Error, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceGenerateInsert", "MemberCardInvoiceGenerateInsert", "memberCardInvoiceGenerate", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DateGenerating", type: "string", value: DateGenerating, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_MemberCardInvoiceGenerateState", type: "string", value: ID_MemberCardInvoiceGenerateState, nullable: true}, {name: "MemberCardInvoiceGenerateState", type: "string", value: MemberCardInvoiceGenerateState, nullable: true}, {name: "ID_Error", type: "int", value: ID_Error, nullable: true}, {name: "Error", type: "string", value: Error, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceGenerateUpdate = function(ID_Login, ID, DateGenerating, ID_Person, Person, ID_MemberCardInvoiceGenerateState, MemberCardInvoiceGenerateState, ID_Error, Error, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceGenerateUpdate", "MemberCardInvoiceGenerateUpdate", "memberCardInvoiceGenerate", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DateGenerating", type: "string", value: DateGenerating, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_MemberCardInvoiceGenerateState", type: "string", value: ID_MemberCardInvoiceGenerateState, nullable: true}, {name: "MemberCardInvoiceGenerateState", type: "string", value: MemberCardInvoiceGenerateState, nullable: true}, {name: "ID_Error", type: "int", value: ID_Error, nullable: true}, {name: "Error", type: "string", value: Error, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceGenerateUpdateGenerate = function(ID_Login, ID, DateGenerating, ID_Person, Person, ID_MemberCardInvoiceGenerateState, MemberCardInvoiceGenerateState, ID_Error, Error, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceGenerateUpdateGenerate", "MemberCardInvoiceGenerateUpdateGenerate", "memberCardInvoiceGenerate", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DateGenerating", type: "string", value: DateGenerating, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_MemberCardInvoiceGenerateState", type: "string", value: ID_MemberCardInvoiceGenerateState, nullable: true}, {name: "MemberCardInvoiceGenerateState", type: "string", value: MemberCardInvoiceGenerateState, nullable: true}, {name: "ID_Error", type: "int", value: ID_Error, nullable: true}, {name: "Error", type: "string", value: Error, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardInvoiceStateAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardInvoiceStateAll", "MemberCardInvoiceStateAll", "memberCardInvoiceStateAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardPrintActivate = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintActivate", "MemberCardPrintActivate", "memberCard", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardPrintAddCards = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintAddCards", "MemberCardPrintAddCards", "memberCard", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"Count","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.MemberCardPrintDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintDetail", "MemberCardPrintDetail", "memberCardPrintDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"DateCreate","paramType":"s:dateTime"},{"paramName":"ID_MemberCardPrintState","paramType":"s:string"},{"paramName":"MemberCardPrintState","paramType":"s:string"},{"paramName":"DateGenerated","paramType":"s:dateTime"},{"paramName":"Error","paramType":"s:string"},{"paramName":"Count","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.MemberCardPrintUpdateGenerating = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintUpdateGenerating", "MemberCardPrintUpdateGenerating", "memberCardPrintUpdateGeneratingInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardUpdateExpired = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardUpdateExpired", "MemberCardUpdateExpired", "memberCard", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.MembershipAllGoogleGroup = function(ID_Login, ID_GoogleGroup, Person, OnlyDirectMember, callback) {
  this.soapRequest("https://is.skaut.cz/MembershipAllGoogleGroup", "MembershipAllGoogleGroup", "membershipAllGoogleGroupInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_GoogleGroup", type: "int", value: ID_GoogleGroup, nullable: false}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "OnlyDirectMember", type: "bool", value: OnlyDirectMember, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OccupationAllRealtyCollection = function(ID_Login, ID_RealtyCollection, IsActive, IsBorrowable, ID_Application, callback) {
  this.soapRequest("https://is.skaut.cz/OccupationAllRealtyCollection", "OccupationAllRealtyCollection", "occupationAllRealtyCollectionInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}, {name: "IsBorrowable", type: "bool", value: IsBorrowable, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.OwnerTypeAll = function(ID_Login, ID_Application, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/OwnerTypeAll", "OwnerTypeAll", "ownerTypeAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllGoogleGroup = function(ID_Login, ID_GoogleGroup, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllGoogleGroup", "PersonAllGoogleGroup", "personAllGoogleGroupInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_GoogleGroup", type: "int", value: ID_GoogleGroup, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.PersonAllJournalRover = function(ID_Login, Unit_ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonAllJournalRover", "PersonAllJournalRover", "personJournalRoverAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "Unit_ID", type: "int", value: Unit_ID, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardAllSummary = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardAllSummary", "MemberCardAllSummary", "memberCardAllSummaryInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.ContactUpdateInvalid = function(ID_Login, Mail, callback) {
  this.soapRequest("https://is.skaut.cz/ContactUpdateInvalid", "ContactUpdateInvalid", "contactUpdateInvalidInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "Mail", type: "string", value: Mail, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardPrintAll = function(ID_Login, ID, ID_MemberCardPrintState, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintAll", "MemberCardPrintAll", "memberCardPrintAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_MemberCardPrintState", type: "string", value: ID_MemberCardPrintState, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardPrintDetailDownload = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintDetailDownload", "MemberCardPrintDetailDownload", "memberCardPrintDetailDownloadInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"FileName","paramType":"s:string"},{"paramName":"FileContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.MemberCardPrintInsert = function(ID_Login, ID, DateCreate, ID_MemberCardPrintState, MemberCardPrintState, DateGenerated, Error, Count, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintInsert", "MemberCardPrintInsert", "memberCardPrint", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_MemberCardPrintState", type: "string", value: ID_MemberCardPrintState, nullable: true}, {name: "MemberCardPrintState", type: "string", value: MemberCardPrintState, nullable: true}, {name: "DateGenerated", type: "string", value: DateGenerated, nullable: true}, {name: "Error", type: "string", value: Error, nullable: true}, {name: "Count", type: "int", value: Count, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.MemberCardPrintUpdateGenerate = function(ID_Login, ID, ValidFrom, ValidTo, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardPrintUpdateGenerate", "MemberCardPrintUpdateGenerate", "memberCardPrintUpdateGenerateInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonDeleteInactive = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDeleteInactive", "PersonDeleteInactive", "personDeleteInactiveInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.PersonDetailHomepage = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/PersonDetailHomepage", "PersonDetailHomepage", "personDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"FirstName","paramType":"s:string"},{"paramName":"LastName","paramType":"s:string"},{"paramName":"NickName","paramType":"s:string"},{"paramName":"ID_Sex","paramType":"s:string"},{"paramName":"Sex","paramType":"s:string"},{"paramName":"TotalFavorite","paramType":"s:int"},{"paramName":"TotalWebMessage","paramType":"s:int"},{"paramName":"TotalWebMessageUnreaded","paramType":"s:int"},{"paramName":"LastLoginDate","paramType":"s:dateTime"},{"paramName":"PhotoExtension","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.PersonOtherDetailUnitEnroll = function(ID_Login, ID, LoadUnitEnroll, callback) {
  this.soapRequest("https://is.skaut.cz/PersonOtherDetailUnitEnroll", "PersonOtherDetailUnitEnroll", "personOtherDetailUnitEnrollInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "LoadUnitEnroll", type: "bool", value: LoadUnitEnroll, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"DateUnitEnrollCondition","paramType":"s:dateTime"},{"paramName":"ID_UserUnitEnrollCondition","paramType":"s:int"},{"paramName":"UserUnitEnrollCondition","paramType":"s:string"},{"paramName":"RejectDataStorage","paramType":"s:boolean"},{"paramName":"RejectAudiovisual","paramType":"s:boolean"},{"paramName":"UnitEnrollAcceptText","paramType":"s:string"},{"paramName":"FileName","paramType":"s:string"},{"paramName":"FileContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.PersonOtherUpdateClear = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/PersonOtherUpdateClear", "PersonOtherUpdateClear", "personOtherUpdateClearInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.PersonOtherUpdateReject = function(ID_Login, ID, ID_Person, BirthCity, ID_Citizenship, Citizenship, Person, MaidenName, ID_DistrictBirth, DistrictBirth, ID_Assurance, Assurance, InsuranceNumber, Allergy, Drugs, HealthLimitation, BodySkills, School, Note, RejectDataStorage, RejectAudiovisual, IsRPS, IsEPS, IsEduParticipantExt, OnlyValidate, callback) {
  this.soapRequest("https://is.skaut.cz/PersonOtherUpdateReject", "PersonOtherUpdateReject", "personOther", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "BirthCity", type: "string", value: BirthCity, nullable: true}, {name: "ID_Citizenship", type: "string", value: ID_Citizenship, nullable: true}, {name: "Citizenship", type: "string", value: Citizenship, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "MaidenName", type: "string", value: MaidenName, nullable: true}, {name: "ID_DistrictBirth", type: "int", value: ID_DistrictBirth, nullable: true}, {name: "DistrictBirth", type: "string", value: DistrictBirth, nullable: true}, {name: "ID_Assurance", type: "int", value: ID_Assurance, nullable: true}, {name: "Assurance", type: "string", value: Assurance, nullable: true}, {name: "InsuranceNumber", type: "string", value: InsuranceNumber, nullable: true}, {name: "Allergy", type: "string", value: Allergy, nullable: true}, {name: "Drugs", type: "string", value: Drugs, nullable: true}, {name: "HealthLimitation", type: "string", value: HealthLimitation, nullable: true}, {name: "BodySkills", type: "string", value: BodySkills, nullable: true}, {name: "School", type: "string", value: School, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "RejectDataStorage", type: "bool", value: RejectDataStorage, nullable: true}, {name: "RejectAudiovisual", type: "bool", value: RejectAudiovisual, nullable: true}, {name: "IsRPS", type: "bool", value: IsRPS, nullable: true}, {name: "IsEPS", type: "bool", value: IsEPS, nullable: true}, {name: "IsEduParticipantExt", type: "bool", value: IsEduParticipantExt, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonOtherUpdateUnitEnroll = function(ID_Login, ID, UnitEnrollExtension, UnitEnroll, callback) {
  this.soapRequest("https://is.skaut.cz/PersonOtherUpdateUnitEnroll", "PersonOtherUpdateUnitEnroll", "personOtherUpdateUnitEnrollInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "UnitEnrollExtension", type: "string", value: UnitEnrollExtension, nullable: true}, {name: "UnitEnroll", type: "string", value: UnitEnroll, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonOtherUpdateUnitEnrollCondition = function(ID_Login, ID, ID_Person, BirthCity, ID_Citizenship, Citizenship, Person, MaidenName, ID_DistrictBirth, DistrictBirth, ID_Assurance, Assurance, InsuranceNumber, Allergy, Drugs, HealthLimitation, BodySkills, School, Note, RejectDataStorage, RejectAudiovisual, IsRPS, IsEPS, IsEduParticipantExt, OnlyValidate, callback) {
  this.soapRequest("https://is.skaut.cz/PersonOtherUpdateUnitEnrollCondition", "PersonOtherUpdateUnitEnrollCondition", "personOther", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "BirthCity", type: "string", value: BirthCity, nullable: true}, {name: "ID_Citizenship", type: "string", value: ID_Citizenship, nullable: true}, {name: "Citizenship", type: "string", value: Citizenship, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "MaidenName", type: "string", value: MaidenName, nullable: true}, {name: "ID_DistrictBirth", type: "int", value: ID_DistrictBirth, nullable: true}, {name: "DistrictBirth", type: "string", value: DistrictBirth, nullable: true}, {name: "ID_Assurance", type: "int", value: ID_Assurance, nullable: true}, {name: "Assurance", type: "string", value: Assurance, nullable: true}, {name: "InsuranceNumber", type: "string", value: InsuranceNumber, nullable: true}, {name: "Allergy", type: "string", value: Allergy, nullable: true}, {name: "Drugs", type: "string", value: Drugs, nullable: true}, {name: "HealthLimitation", type: "string", value: HealthLimitation, nullable: true}, {name: "BodySkills", type: "string", value: BodySkills, nullable: true}, {name: "School", type: "string", value: School, nullable: true}, {name: "Note", type: "string", value: Note, nullable: true}, {name: "RejectDataStorage", type: "bool", value: RejectDataStorage, nullable: true}, {name: "RejectAudiovisual", type: "bool", value: RejectAudiovisual, nullable: true}, {name: "IsRPS", type: "bool", value: IsRPS, nullable: true}, {name: "IsEPS", type: "bool", value: IsEPS, nullable: true}, {name: "IsEduParticipantExt", type: "bool", value: IsEduParticipantExt, nullable: true}, {name: "OnlyValidate", type: "bool", value: OnlyValidate, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.PersonQualificationLetterDownload = function(ID_Login, ID_Qualification, callback) {
  this.soapRequest("https://is.skaut.cz/PersonQualificationLetterDownload", "PersonQualificationLetterDownload", "personQualificationLetterDownloadInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Qualification", type: "int", value: ID_Qualification, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"Content","paramType":"s:base64Binary"},{"paramName":"FileName","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.PersonUpdatePhotoSize = function(ID_Login, ID, PhotoX, PhotoY, PhotoSize, callback) {
  this.soapRequest("https://is.skaut.cz/PersonUpdatePhotoSize", "PersonUpdatePhotoSize", "personUpdatePhotoSizeInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "PhotoX", type: "int", value: PhotoX, nullable: false}, {name: "PhotoY", type: "int", value: PhotoY, nullable: false}, {name: "PhotoSize", type: "int", value: PhotoSize, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.MemberCardAllRequestCount = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardAllRequestCount", "MemberCardAllRequestCount", "memberCardAllRequestCountInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], true, callback);
}
OrganizationUnit.prototype.MemberCardAllRequest = function(ID_Login, ID_MemberCardPrint, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardAllRequest", "MemberCardAllRequest", "memberCardAllRequestInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_MemberCardPrint", type: "int", value: ID_MemberCardPrint, nullable: true}], [{"paramName":"FileName","paramType":"s:string"},{"paramName":"Content","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.MemberCardDetailValid = function(ID_Login, ID_Application, DisplayName, BitOutput, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardDetailValid", "MemberCardDetailValid", "memberCardDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: true}, {name: "ID_Application", type: "string", value: ID_Application, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "BitOutput", type: "bool", value: BitOutput, nullable: true}], [{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"MemberCardType","paramType":"s:string"},{"paramName":"IsStudent","paramType":"s:boolean"},{"paramName":"IsMemberCard","paramType":"s:boolean"},{"paramName":"IsValid","paramType":"s:boolean"},{"paramName":"ID_MemberCardType","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.MemberCardUpdateInvalid = function(ID_Login, ID, ID_MemberCardState, MemberCardState, DisplayName, ID_Person, Person, Birthday, ID_MemberCardType, MemberCardType, Year, DateCreate, Price, IsAuthorized, IsPaid, ValidFrom, ValidTo, ID_PersonSchool, PersonSchool, PersonSchoolCity, ID_PersonRegistration, UnitStredisko, LeaderContact, callback) {
  this.soapRequest("https://is.skaut.cz/MemberCardUpdateInvalid", "MemberCardUpdateInvalid", "memberCard", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_MemberCardState", type: "string", value: ID_MemberCardState, nullable: true}, {name: "MemberCardState", type: "string", value: MemberCardState, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "Birthday", type: "string", value: Birthday, nullable: true}, {name: "ID_MemberCardType", type: "string", value: ID_MemberCardType, nullable: true}, {name: "MemberCardType", type: "string", value: MemberCardType, nullable: true}, {name: "Year", type: "int", value: Year, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "Price", type: "float", value: Price, nullable: true}, {name: "IsAuthorized", type: "bool", value: IsAuthorized, nullable: true}, {name: "IsPaid", type: "bool", value: IsPaid, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "ID_PersonSchool", type: "int", value: ID_PersonSchool, nullable: true}, {name: "PersonSchool", type: "string", value: PersonSchool, nullable: true}, {name: "PersonSchoolCity", type: "string", value: PersonSchoolCity, nullable: true}, {name: "ID_PersonRegistration", type: "int", value: ID_PersonRegistration, nullable: true}, {name: "UnitStredisko", type: "string", value: UnitStredisko, nullable: true}, {name: "LeaderContact", type: "string", value: LeaderContact, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.QualificationDownload = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationDownload", "QualificationDownload", "QualificationDownloadInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}], [{"paramName":"ID","paramType":"s:int"},{"paramName":"Content","paramType":"s:base64Binary"},{"paramName":"FileName","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.QualificationMistakeInsert = function(ID_Login, ID, ID_Qualification, ID_PersonCreated, PersonCreated, DateCreated, Description, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationMistakeInsert", "QualificationMistakeInsert", "qualificationMistake", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Qualification", type: "int", value: ID_Qualification, nullable: true}, {name: "ID_PersonCreated", type: "int", value: ID_PersonCreated, nullable: true}, {name: "PersonCreated", type: "string", value: PersonCreated, nullable: true}, {name: "DateCreated", type: "int", value: DateCreated, nullable: true}, {name: "Description", type: "string", value: Description, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.QualificationRequestAll = function(ID_Login, ID_Person, ID, ID_QualificationType, ID_QualificationRequestState, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationRequestAll", "QualificationRequestAll", "qualificationRequestAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "ID_QualificationRequestState", type: "string", value: ID_QualificationRequestState, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.QualificationRequestDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationRequestDetail", "QualificationRequestDetail", "qualificationRequestDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Person","paramType":"s:int"},{"paramName":"Person","paramType":"s:string"},{"paramName":"ID_PersonCreated","paramType":"s:int"},{"paramName":"PersonCreated","paramType":"s:string"},{"paramName":"ID_QualificationType","paramType":"s:int"},{"paramName":"QualificationType","paramType":"s:string"},{"paramName":"ValidFrom","paramType":"s:dateTime"},{"paramName":"ValidTo","paramType":"s:dateTime"},{"paramName":"LetterNumber","paramType":"s:string"},{"paramName":"LetterExtension","paramType":"s:string"},{"paramName":"DateCreate","paramType":"s:dateTime"},{"paramName":"ID_QualificationRequestState","paramType":"s:string"},{"paramName":"QualificationRequestState","paramType":"s:string"},{"paramName":"Course","paramType":"s:string"},{"paramName":"Decision","paramType":"s:string"},{"paramName":"ID_PersonDecision","paramType":"s:int"},{"paramName":"PersonDecision","paramType":"s:string"},{"paramName":"ID_TemplateFileScan","paramType":"s1:guid"}], false, callback);
}
OrganizationUnit.prototype.QualificationRequestDetailDownloadLetter = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationRequestDetailDownloadLetter", "QualificationRequestDetailDownloadLetter", "qualificationRequestDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"FileName","paramType":"s:string"},{"paramName":"FileContent","paramType":"s:base64Binary"}], false, callback);
}
OrganizationUnit.prototype.QualificationRequestInsert = function(ID_Login, ID, ID_Person, Person, ID_PersonCreated, PersonCreated, ID_QualificationType, QualificationType, ValidFrom, ValidTo, LetterNumber, LetterExtension, DateCreate, ID_QualificationRequestState, QualificationRequestState, Course, Decision, ID_PersonDecision, PersonDecision, ID_TemplateFileScan, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationRequestInsert", "QualificationRequestInsert", "qualificationRequest", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_PersonCreated", type: "int", value: ID_PersonCreated, nullable: true}, {name: "PersonCreated", type: "string", value: PersonCreated, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "QualificationType", type: "string", value: QualificationType, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "LetterExtension", type: "string", value: LetterExtension, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_QualificationRequestState", type: "string", value: ID_QualificationRequestState, nullable: true}, {name: "QualificationRequestState", type: "string", value: QualificationRequestState, nullable: true}, {name: "Course", type: "string", value: Course, nullable: true}, {name: "Decision", type: "string", value: Decision, nullable: true}, {name: "ID_PersonDecision", type: "int", value: ID_PersonDecision, nullable: true}, {name: "PersonDecision", type: "string", value: PersonDecision, nullable: true}, {name: "ID_TemplateFileScan", type: "string", value: ID_TemplateFileScan, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.QualificationRequestStateAll = function(ID_Login, ID, DisplayName, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationRequestStateAll", "QualificationRequestStateAll", "qualificationRequestStateAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "string", value: ID, nullable: true}, {name: "DisplayName", type: "string", value: DisplayName, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.QualificationRequestUpdate = function(ID_Login, ID, ID_Person, Person, ID_PersonCreated, PersonCreated, ID_QualificationType, QualificationType, ValidFrom, ValidTo, LetterNumber, LetterExtension, DateCreate, ID_QualificationRequestState, QualificationRequestState, Course, Decision, ID_PersonDecision, PersonDecision, ID_TemplateFileScan, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationRequestUpdate", "QualificationRequestUpdate", "qualificationRequest", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}, {name: "ID_PersonCreated", type: "int", value: ID_PersonCreated, nullable: true}, {name: "PersonCreated", type: "string", value: PersonCreated, nullable: true}, {name: "ID_QualificationType", type: "int", value: ID_QualificationType, nullable: true}, {name: "QualificationType", type: "string", value: QualificationType, nullable: true}, {name: "ValidFrom", type: "string", value: ValidFrom, nullable: true}, {name: "ValidTo", type: "string", value: ValidTo, nullable: true}, {name: "LetterNumber", type: "string", value: LetterNumber, nullable: true}, {name: "LetterExtension", type: "string", value: LetterExtension, nullable: true}, {name: "DateCreate", type: "string", value: DateCreate, nullable: true}, {name: "ID_QualificationRequestState", type: "string", value: ID_QualificationRequestState, nullable: true}, {name: "QualificationRequestState", type: "string", value: QualificationRequestState, nullable: true}, {name: "Course", type: "string", value: Course, nullable: true}, {name: "Decision", type: "string", value: Decision, nullable: true}, {name: "ID_PersonDecision", type: "int", value: ID_PersonDecision, nullable: true}, {name: "PersonDecision", type: "string", value: PersonDecision, nullable: true}, {name: "ID_TemplateFileScan", type: "string", value: ID_TemplateFileScan, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.QualificationTypeDetail = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationTypeDetail", "QualificationTypeDetail", "qualificationTypeDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [{"paramName":"ValidityLength","paramType":"s:int"},{"paramName":"RenewalLength","paramType":"s:int"},{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"IsActive","paramType":"s:boolean"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"},{"paramName":"Key","paramType":"s:string"},{"paramName":"IsRequest","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.QualificationUpdateSendWarning = function(ID_Login, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationUpdateSendWarning", "QualificationUpdateSendWarning", "qualificationUpdateSendWarningInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.QualificationUpload = function(ID_Login, ID, Content, LetterExtension, callback) {
  this.soapRequest("https://is.skaut.cz/QualificationUpload", "QualificationUpload", "qualificationUploadInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "Content", type: "string", value: Content, nullable: true}, {name: "LetterExtension", type: "string", value: LetterExtension, nullable: true}], [], false, callback);
}
OrganizationUnit.prototype.RealtyAllRealtyCollection = function(ID_Login, ID_RealtyCollection, IsActive, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyAllRealtyCollection", "RealtyAllRealtyCollection", "realtyAllRealtyCollectionInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: false}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionAdminAll = function(ID_Login, ID_RealtyCollection, ID, ID_Person, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionAdminAll", "RealtyCollectionAdminAll", "realtyCollectionAdminAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionAdminDelete = function(ID_Login, ID, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionAdminDelete", "RealtyCollectionAdminDelete", "realtyCollectionAdminDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionAdminInsert = function(ID_Login, ID, ID_RealtyCollection, RealtyCollection, ID_Person, Person, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionAdminInsert", "RealtyCollectionAdminInsert", "realtyCollectionAdmin", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_Person", type: "int", value: ID_Person, nullable: true}, {name: "Person", type: "string", value: Person, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionDelete = function(ID_Login, ID, Note, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionDelete", "RealtyCollectionDelete", "realtyCollectionDeleteInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "Note", type: "string", value: Note, nullable: true}], [{"paramName":"Deleted","paramType":"s:boolean"}], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionDetail = function(ID_Login, ID, IsActive, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionDetail", "RealtyCollectionDetail", "realtyCollectionDetailInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "IsActive", type: "bool", value: IsActive, nullable: true}], [{"paramName":"PhotoExtension","paramType":"s:string"},{"paramName":"PhotoFileContent","paramType":"s:base64Binary"},{"paramName":"ID_TempFilePhoto","paramType":"s1:guid"},{"paramName":"FotogalleryUrl","paramType":"s:string"},{"paramName":"ID_Login","paramType":"s1:guid"},{"paramName":"ID","paramType":"s:int"},{"paramName":"ID_Unit","paramType":"s:int"},{"paramName":"Unit","paramType":"s:string"},{"paramName":"UnitRegistrationNumber","paramType":"s:string"},{"paramName":"Owner","paramType":"s:string"},{"paramName":"ID_User","paramType":"s:int"},{"paramName":"IsActive","paramType":"s:boolean"},{"paramName":"DisplayName","paramType":"s:string"},{"paramName":"Description","paramType":"s:string"},{"paramName":"Web","paramType":"s:string"},{"paramName":"GpsLatitude","paramType":"s:double"},{"paramName":"GpsLongitude","paramType":"s:double"},{"paramName":"HasAddress","paramType":"s:boolean"},{"paramName":"Street","paramType":"s:string"},{"paramName":"City","paramType":"s:string"},{"paramName":"Postcode","paramType":"s:string"},{"paramName":"District","paramType":"s:string"},{"paramName":"TransportationMethods","paramType":"tns:ArrayOfString"},{"paramName":"TransportationMethodsText","paramType":"s:string"},{"paramName":"TransportDescription","paramType":"s:string"},{"paramName":"Locations","paramType":"tns:ArrayOfString"},{"paramName":"LocationsText","paramType":"s:string"},{"paramName":"PointsOfInterest","paramType":"s:string"},{"paramName":"Note","paramType":"s:string"}], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionLocationAll = function(ID_Login, ID_RealtyCollection, ID, ID_RealtyLocation, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionLocationAll", "RealtyCollectionLocationAll", "realtyCollectionLocationAllInput", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "ID", type: "int", value: ID, nullable: true}, {name: "ID_RealtyLocation", type: "string", value: ID_RealtyLocation, nullable: true}], [], true, callback);
}
OrganizationUnit.prototype.RealtyCollectionLocationDeleteRealtyCollection = function(ID_Login, ID_RealtyCollection, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionLocationDeleteRealtyCollection", "RealtyCollectionLocationDeleteRealtyCollection", "realtyCollectionLocationDeleteRealtyCollection", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: false}], [], false, callback);
}
OrganizationUnit.prototype.RealtyCollectionLocationInsert = function(ID_Login, ID, ID_RealtyCollection, RealtyCollection, ID_RealtyLocation, RealtyLocation, callback) {
  this.soapRequest("https://is.skaut.cz/RealtyCollectionLocationInsert", "RealtyCollectionLocationInsert", "realtyCollectionLocation", [{name: "ID_Login", type: "string", value: ID_Login, nullable: false}, {name: "ID", type: "int", value: ID, nullable: false}, {name: "ID_RealtyCollection", type: "int", value: ID_RealtyCollection, nullable: true}, {name: "RealtyCollection", type: "string", value: RealtyCollection, nullable: true}, {name: "ID_RealtyLocation", type: "string", value: ID_RealtyLocation, nullable: true}, {name: "RealtyLocation", type: "string", value: RealtyLocation, nullable: true}], [{"paramName":"ID","paramType":"s:int"}], false, callback);
}

module.exports = OrganizationUnit;
